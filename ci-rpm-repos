#!/bin/bash

set -e

project="$1"
branch="$2"
if [ -n "$3" ]; then
 extraverdir="/$3"
 extraver="-$3"
fi

if [ -z "$project" ]; then
	echo "no project specificed"
	exit 1
fi

if [ -z "$branch" ]; then
	echo "no branch specificed"
	exit 1
fi

rpmdir=/srv/publish/rpmrepos

echo "Purging 0 byte files"
find $rpmdir/ -type f -size 0 -print -delete

echo "Purging empty dirs"
find $rpmdir/ -type d -empty -print -delete

echo "Updating all rpm repos for project: $project branch: $branch extraver: $3"

cd $rpmdir/$project/

process_pr() {
	cd $branch
	for i in $(ls); do
		echo processing $i
		cd $i
		createrepo .
		cd -
	done
	cd -
	cd $rpmdir/$project/pr
	find . -maxdepth 0 -type d -ctime +30 -print -delete
	cd -
}

process_publish() {
	for i in $(ls | grep -v pr); do
		cd $rpmdir/$project/
		echo "Processing $i"

		cd $i

		if [ ! -d ${branch}${extraverdir} ]; then
			continue
		fi

		toplevelbranch=$(basename $branch)${extraver}
		rm -f ${toplevelbranch}
		ln -sf ${branch}${extraverdir} ${toplevelbranch}

		cd $toplevelbranch

		# createrepo on latest and update symlinks
		lastbuild="$(ls -1 | sort -n | tail -n 1)"
		echo "Last build detected: $lastbuild"
		cd $lastbuild
		createrepo .
		cd ..
		rm -f latest
		ln -sf $lastbuild latest

		# remove old builds (keep last 5)
		builds="$(ls -1 | grep -v latest | sort -n)"
		numbuilds="$(echo "$builds" | wc -l)"
		if [ "$numbuilds" -gt 5 ]; then
			purgenum=$((numbuilds - 5))
			candidates="$(echo "$builds" | head -n $purgenum)"
			for x in $candidates; do
				echo "Removing old build: $x"
				rm -rf $x
			done
		fi
	done

	# generate repo files
	cd $rpmdir/

	cat > $rpmdir/opensuse-readme.repo << EOF
OpenSUSE users, please browse the knet/ folder for appropriate builds for your deployment.
You can use zypper to enable those repositories.

For example use the following command to add the repository:
zypper add https://kronosnet.org/builds/knet/opensuse-tumbleweed-x86-64/main/latest/ knet

and to enable and autorefresh:
zypper mr -e -f -G knet

please be aware the repositories are not signed.
EOF

	for i in $(ls | grep -v repo); do
		# project level
		cd $i

		for x in $(ls | grep -v opensuse | grep -v "^pr"); do
			# builder level
			cd $x

			for b in $(ls |grep -v origin); do

			echo "Creating $i-$b-$x repo file"
			cat > $rpmdir/$i-$b-$x.repo << EOF
[$i-$b-$x]
name=$i-$b-$x
baseurl=https://kronosnet.org/builds/$i/$x/$b/latest/
repo_gpgcheck=0
enabled=1
gpgcheck=0
metadata_expire=1d
skip_if_unavailable=True
module_hotfixes=1
EOF

			done

			cd - >/dev/null 2>&1
		done

		cd .. >/dev/null 2>&1
	done

	cd $rpmdir/

	for i in main-repo main-kernel-repo next-stable-repo next-stable-kernel-repo; do
		cd $i
		for x in $(ls); do
			echo "Creating $i-$x repo file"
			cat > $rpmdir/$i-$x.repo << EOF
[$i-$x]
name=$i-$x
baseurl=https://kronosnet.org/builds/$i/$x/
repo_gpgcheck=0
enabled=1
gpgcheck=0
metadata_expire=1d
skip_if_unavailable=True
module_hotfixes=1
EOF
			if [ -h "$x" ]; then
				continue
			fi
			cd $x
			createrepo .
			cd ..
		done
		cd ..
	done
}

case $branch in
	pr*)
		process_pr
		;;
	*)
		process_publish
		;;
esac

cd $rpmdir/
rsync -av --sparse-block=0 --progress --delete-after . www.kronosnet.org:~kronosnet/kronosnet/builds/.

exit 0
