echo ===== JENKINS JOB INFO =====

echo "Build started by: ${JOB_BASE_NAME}"

JOBNAME=$(echo ${JOB_BASE_NAME}  | sed -e 's/=.*//g')

case $JOBNAME in
 *covscan)
  export build=coverity
 ;;
 *rpms)
  export build=rpm
 ;;
 *crosscompile*)
  export build=crosscompile
 ;;
esac

if [ -n "$build" ]; then
 echo "$build build detected from jenkins job name"
else
 echo "normal build detected from jenkins job name"
fi

echo ===== PATH INFO =====

export PATH="$PATH:$HOME/ci-tools"

if [ -d /opt/coverity/bin ]; then
 export PATH=/opt/coverity/bin:$PATH
fi

echo PATH: $PATH

echo ===== TOOLCHAIN INFO =====
export MAKE=make
if [ "${USEGMAKE}" = 1 ]; then
 export MAKE=gmake
fi
$MAKE --version || true

if [ -z "$compiler" ]; then
 compiler=gcc
fi
$compiler --version || true

case "$compiler" in
 *gcc)
  echo === implicit options/values with gcc ===
  { $compiler -Q --help=common || true; } | grep -e '-[Wf]'
 ;;
 *)
 ;;
esac

ld --version || true
export CC=$compiler

if [ -z "$python" ]; then
 python=python3
fi
if [ "$python" = "python2" ] && [ "$DEST" = "pcmk" ]; then
 python=python3
fi
python=`which $python`
$python --version || true
if [ "$DEST" != "pcs" ]; then
 export PYTHON=$python
fi

case "${NODE_NAME}" in
 freebsd-12*|freebsd-devel*)
  PARALLELMAKE="-j $(sysctl -n hw.ncpu)"
 ;;
 *)
  PARALLELMAKE="-j $(nproc)"
 ;;
esac

echo "Setting PARALLELMAKE to '$PARALLELMAKE'"
export PARALLELMAKE

echo ===== SOURCE TREE INFO =====

if [ -z "${ghprbActualCommit}" ]; then
 export CITARGET=${GIT_BRANCH}
else
 export CITARGET=${ghprbActualCommit}
fi
if [ -n "${ghprbPullId}" ] && [ "${ghprbPullId}" != 1 ]; then
 export CITARGET="origin/${ghprbTargetBranch}"
fi

if [ -n "${BRANCH_TO}" ] && [ "${BRANCH_TO}" != "None" ]; then
 export CITARGET="origin/${BRANCH_TO}"
else
 if [ -n "${BRANCH}" ]; then
  export CITARGET="origin/main"
 fi
fi

echo CITARGET $CITARGET

# Latest Pacemaker release branch
PCMK_RELEASE=2.1

# origin/main should use all main branches built
# from sources
if [ "$CITARGET" = "origin/main" ]; then
 if [ -z "${pcmkver}" ]; then
  export pcmkver=main
 fi
else
 if [ -z "${pcmkver}" ]; then
  export pcmkver="${PCMK_RELEASE}"
 fi
fi

# rpm builds should use standard packages
if [ "$build" != "rpm" ]; then
 echo ===== PKG_CONFIG_PATH info =====

 EXTERNAL_LD_LIBRARY_PATH=""

 # all projects should build against libqb main
 # exceptions below
 QB_INSTALL_PATH=/srv/qb/origin/main/

 # origin/main should use all main branches built
 # from sources
 if [ "$CITARGET" = "origin/main" ]; then
  KNET_INSTALL_PATH=/srv/knet/origin/main/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/main/
 else
  KNET_INSTALL_PATH=/srv/knet/origin/stable1-proposed/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/camelback/
 fi

 PCMK_INSTALL_PATH=/srv/pcmk/origin/${pcmkver}/

 # those projects only have main branch
 QDEVICE_INSTALL_PATH=/srv/qdevice/origin/main/
 SBD_INSTALL_PATH=/srv/sbd/origin/main-pcmk-${pcmkver}/
 FAS_INSTALL_PATH=/srv/fas/origin/main/
 RAS_INSTALL_PATH=/srv/ras/origin/main/
 BOOTH_INSTALL_PATH=/srv/booth/origin/main-pcmk-${pcmkver}/

 case "$DEST" in
  corosync)
   # corosync supports both knet stable and knet main
   # we need to test build both
   if [ -n "${knetver}" ]; then
    KNET_INSTALL_PATH=/srv/knet/origin/${knetver}/
   fi
   ;;
  sbd|booth|pcs)
   # booth and sbd only have a main branch, but they need
   # different settings when building against pcmk main or release
   if [ "${pcmkver}" = "${PCMK_RELEASE}" ]; then
    KNET_INSTALL_PATH=/srv/knet/origin/stable1-proposed/
    COROSYNC_INSTALL_PATH=/srv/corosync/origin/camelback/
   fi
   ;;
 esac

 if [ -n "$KNET_INSTALL_PATH" ] && [ -d "$KNET_INSTALL_PATH" ]; then
  KNET_LIB=$(ls -1 $KNET_INSTALL_PATH | grep lib)
  KNET_CONFIG_PATH=$KNET_INSTALL_PATH/$KNET_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$KNET_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$KNET_INSTALL_PATH/$KNET_LIB/
  echo libknet build info: $(cat $KNET_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$KNET_CONFIG_PATH pkg-config --modversion libknet || true
 fi

 if [ -n "$QB_INSTALL_PATH" ] && [ -d "$QB_INSTALL_PATH" ]; then
  QB_LIB=$(ls -1 $QB_INSTALL_PATH | grep lib)
  QB_CONFIG_PATH=$QB_INSTALL_PATH/$QB_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$QB_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$QB_INSTALL_PATH/$QB_LIB/
  echo libqb build info: $(cat $QB_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$QB_CONFIG_PATH pkg-config --modversion libqb || true
 else
  echo using libqb as provided by OS
 fi

 if [ -n "$COROSYNC_INSTALL_PATH" ] && [ -d "$COROSYNC_INSTALL_PATH" ]; then
  if [ -d $COROSYNC_INSTALL_PATH/lib64/pkgconfig ]; then
   COROSYNC_LIB=lib64
  else
   COROSYNC_LIB=lib
  fi
  COROSYNC_CONFIG_PATH=$COROSYNC_INSTALL_PATH/$COROSYNC_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$COROSYNC_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$COROSYNC_INSTALL_PATH/$COROSYNC_LIB/
  echo corosync build info: $(cat $COROSYNC_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$COROSYNC_CONFIG_PATH pkg-config --modversion corosync || true
 fi

 if [ -n "$QDEVICE_INSTALL_PATH" ] && [ -d "$QDEVICE_INSTALL_PATH" ]; then
  if [ -d $QDEVICE_INSTALL_PATH/lib64 ]; then
   QDEVICE_LIB=lib64
  else
   QDEVICE_LIB=lib
  fi
  QDEVICE_CONFIG_PATH=$QDEVICE_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$QDEVICE_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$QDEVICE_INSTALL_PATH/$QDEVICE_LIB/
  echo corosync-qdevice build info: $(cat $QDEVICE_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$QDEVICE_CONFIG_PATH pkg-config --modversion corosync-qdevice || true
 fi

 if [ -n "$PCMK_INSTALL_PATH" ] && [ -d "$PCMK_INSTALL_PATH" ]; then
  if [ -d $PCMK_INSTALL_PATH/lib64/pkgconfig ]; then
   PCMK_LIB=lib64
  else
   PCMK_LIB=lib
  fi
  PCMK_CONFIG_PATH=$PCMK_INSTALL_PATH/$PCMK_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$PCMK_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$PCMK_INSTALL_PATH/$PCMK_LIB/
  echo pacemaker build info: $(cat $PCMK_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$PCMK_CONFIG_PATH pkg-config --modversion pacemaker || true
 fi

 if [ -n "$SBD_INSTALL_PATH" ] && [ -d "$SBD_INSTALL_PATH" ]; then
  if [ -d $SBD_INSTALL_PATH/lib64 ]; then
   SBD_LIB=lib64
  else
   SBD_LIB=lib
  fi
  SBD_CONFIG_PATH=$SBD_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$SBD_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$SBD_INSTALL_PATH/$SBD_LIB/
  echo sbd build info: $(cat $SBD_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$SBD_CONFIG_PATH pkg-config --modversion sbd || true
 fi

 if [ -n "$FAS_INSTALL_PATH" ] && [ -d "$FAS_INSTALL_PATH" ]; then
  if [ -d $FAS_INSTALL_PATH/lib64 ]; then
   FAS_LIB=lib64
  else
   FAS_LIB=lib
  fi
  FAS_CONFIG_PATH=$FAS_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$FAS_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$FAS_INSTALL_PATH/$FAS_LIB/
  echo fence-agents build info: $(cat $FAS_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$FAS_CONFIG_PATH pkg-config --modversion fence-agents || true
 fi

 if [ -n "$RAS_INSTALL_PATH" ] && [ -d "$RAS_INSTALL_PATH" ]; then
  if [ -d $RAS_INSTALL_PATH/lib64 ]; then
   RAS_LIB=lib64
  else
   RAS_LIB=lib
  fi
  RAS_CONFIG_PATH=$RAS_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$RAS_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$RAS_INSTALL_PATH/$RAS_LIB/
  echo resource-agents build info: $(cat $RAS_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$RAS_CONFIG_PATH pkg-config --modversion resource-agents || true
 fi

 if [ -n "$BOOTH_INSTALL_PATH" ] && [ -d "$BOOTH_INSTALL_PATH" ]; then
  BOOTH_CONFIG_PATH=$BOOTH_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$BOOTH_CONFIG_PATH
  echo booth build info: $(cat $BOOTH_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$BOOTH_CONFIG_PATH pkg-config --modversion booth || true
 fi

else

 LIBQB_REPO=https://kronosnet.org/builds/libqb-main-${NODE_NAME}.repo
 LIBQB_REPO_PATH=https://kronosnet.org/builds/libqb/${NODE_NAME}/main/latest/

 DLM_REPO=https://kronosnet.org/builds/dlm-main-${NODE_NAME}.repo
 DLM_REPO_PATH=https://kronosnet.org/builds/dlm/${NODE_NAME}/main/latest/

 GFS2UTILS_REPO=https://kronosnet.org/builds/gfs2-utils-main-${NODE_NAME}.repo
 GFS2UTILS_REPO_PATH=https://kronosnet.org/builds/gfs2-utils/${NODE_NAME}/main/latest/

 QDEVICE_REPO=https://kronosnet.org/builds/corosync-qdevice-main-${NODE_NAME}.repo
 QDEVICE_REPO_PATH=https://kronosnet.org/builds/corosync-qdevice/${NODE_NAME}/main/latest/

 SBD_REPO=https://kronosnet.org/builds/sbd-main-pcmk-${pcmkver}-${NODE_NAME}.repo
 SBD_REPO_PATH=https://kronosnet.org/builds/sbd/${NODE_NAME}/main-pcmk-${pcmkver}/latest/

 FAS_REPO=https://kronosnet.org/builds/fence-agents-main-${NODE_NAME}.repo
 FAS_REPO_PATH=https://kronosnet.org/builds/fence-agents/${NODE_NAME}/main/latest/

 RAS_REPO=https://kronosnet.org/builds/resource-agents-main-${NODE_NAME}.repo
 RAS_REPO_PATH=https://kronosnet.org/builds/resource-agents/${NODE_NAME}/main/latest/

 BOOTH_REPO=https://kronosnet.org/builds/booth-main-pcmk-${pcmkver}-${NODE_NAME}.repo
 BOOTH_REPO_PATH=https://kronosnet.org/builds/booth/${NODE_NAME}/main-pcmk-${pcmkver}/latest/

 if [ "$CITARGET" = "origin/main" ]; then
  KNET_REPO=https://kronosnet.org/builds/knet-main-${NODE_NAME}.repo
  KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/main/latest/
  COROSYNC_REPO=https://kronosnet.org/builds/corosync-main-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://kronosnet.org/builds/corosync/${NODE_NAME}/main/latest/
  PCMK_REPO=https://kronosnet.org/builds/pacemaker-main-${NODE_NAME}.repo
  PCMK_REPO_PATH=https://kronosnet.org/builds/pacemaker/${NODE_NAME}/main/latest/
 else
  KNET_REPO=https://kronosnet.org/builds/knet-stable1-proposed-${NODE_NAME}.repo
  KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/stable1-proposed/latest/
  COROSYNC_REPO=https://kronosnet.org/builds/corosync-camelback-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://kronosnet.org/builds/corosync/${NODE_NAME}/camelback/latest/
  PCMK_REPO="https://kronosnet.org/builds/pacemaker-${PCMK_RELEASE}-${NODE_NAME}.repo"
  PCMK_REPO_PATH="https://kronosnet.org/builds/pacemaker/${NODE_NAME}/${PCMK_RELEASE}/latest/"
 fi

 case "$DEST" in
  corosync)
   # corosync supports both knet stable and knet main
   # we need to test build both
   if [ -n "${knetver}" ]; then
    KNET_REPO=https://kronosnet.org/builds/knet-${knetver}-${NODE_NAME}.repo
    KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/${knetver}/latest/
   fi
   ;;
  sbd|booth|pcs)
   # booth and sbd only have a main branch, but they need
   # different settings when building against pcmk main or release
   if [ "${pcmkver}" = "${PCMK_RELEASE}" ]; then
    KNET_REPO=https://kronosnet.org/builds/knet-stable1-proposed-${NODE_NAME}.repo
    KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/stable1-proposed/latest/
    COROSYNC_REPO=https://kronosnet.org/builds/corosync-camelback-${NODE_NAME}.repo
    COROSYNC_REPO_PATH=https://kronosnet.org/builds/corosync/${NODE_NAME}/camelback/latest/
    PCMK_REPO=https://kronosnet.org/builds/pacemaker-${PCMK_RELEASE}-${NODE_NAME}.repo
    PCMK_REPO_PATH=https://kronosnet.org/builds/pacemaker/${NODE_NAME}/${PCMK_RELEASE}/latest/
   fi
   ;;
 esac

fi

# DLM main not available in RHEL7 or equivalent
case "${NODE_NAME}" in
 rhel7*|centos-7*)
  DLM_REPO=""
  DLM_REPO_PATH=""
 ;;
esac

export KNET_REPO
export KNET_REPO_PATH
export LIBQB_REPO
export LIBQB_REPO_PATH
export DLM_REPO
export DLM_REPO_PATH
export GFS2UTILS_REPO
export GFS2UTILS_REPO_PATH
export COROSYNC_REPO
export COROSYNC_REPO_PATH
export PCMK_REPO
export PCMK_REPO_PATH
export QDEVICE_REPO
export QDEVICE_REPO_PATH
export SBD_REPO
export SBD_REPO_PATH
export FAS_REPO
export FAS_REPO_PATH
export RAS_REPO
export RAS_REPO_PATH
export BOOTH_REPO
export BOOTH_REPO_PATH
