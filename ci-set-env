echo ===== JENKINS JOB INFO =====

echo "Build started by: ${JOB_BASE_NAME}"

JOBNAME=$(echo ${JOB_BASE_NAME}  | sed -e 's/=.*//g')

case $JOBNAME in
 *covscan)
  export build=coverity
 ;;
 *rpms)
  export build=rpm
 ;;
 *crosscompile*)
  export build=crosscompile
 ;;
esac

if [ -n "$build" ]; then
 echo "$build build detected from jenkins job name"
else
 echo "normal build detected from jenkins job name"
fi

echo ===== PATH INFO =====

export PATH="$PATH:$HOME/ci-tools"

if [ -d /opt/coverity/bin ]; then
 export PATH=/opt/coverity/bin:$PATH
fi

echo PATH: $PATH

echo ===== TOOLCHAIN INFO =====
export MAKE=make
if [ "${USEGMAKE}" = 1 ]; then
 export MAKE=gmake
fi
$MAKE --version || true

if [ -z "$compiler" ]; then
 compiler=gcc
fi
$compiler --version || true

ld --version || true
export CC=$compiler

if [ -z "$python" ]; then
 python=python3
fi
python=`which $python`
$python --version || true
if [ "$DEST" != "pcs" ]; then
 export PYTHON=$python
fi

case "${NODE_NAME}" in
 freebsd-12*|freebsd-13*)
  PARALLELMAKE="-j $(sysctl -n hw.ncpu)"
 ;;
 *)
  PARALLELMAKE="-j $(nproc)"
 ;;
esac

PARALLEOUTPUT=""

echo "Test for -O support in '$MAKE'"
if $MAKE -f $HOME/ci-tools/Makefile.stub $PARALLELMAKE -O >/dev/null 2>&1; then
  PARALLELOUTPUT="-O"
fi

echo "Test for -Orecurse support in '$MAKE'"
if $MAKE -f $HOME/ci-tools/Makefile.stub $PARALLELMAKE -Orecurse >/dev/null 2>&1; then
  PARALLELOUTPUT="-Orecurse"
fi

PARALLELMAKE="$PARALLELMAKE $PARALLELOUTPUT"

echo "Setting PARALLELMAKE to '$PARALLELMAKE'"
export PARALLELMAKE

echo ===== SOURCE TREE INFO =====

if [ -z "${actual_commit}" ]; then
 echo "Unable to proceed without actual_commit information"
 exit 1
fi

# Latest Pacemaker release branch
PACEMAKER_RELEASE=2.1

# origin/main should use all main branches built
# from sources
if [ "${target}" = "main" ]; then
 if [ -z "${pacemakerver}" ]; then
  export pacemakerver=main
 fi
else
 if [ -z "${pacemakerver}" ]; then
  export pacemakerver="${PACEMAKER_RELEASE}"
 fi
fi

# rpm builds should use standard packages
if [ "$build" != "rpm" ]; then
 echo ===== PKG_CONFIG_PATH info =====

 EXTERNAL_LD_LIBRARY_PATH=""

 # all projects should build against libqb main
 # exceptions below
 LIBQB_INSTALL_PATH=/srv/libqb/origin/main/

 # origin/main should use all main branches built
 # from sources
 if [ "${target}" = "main" ]; then
  KRONOSNET_INSTALL_PATH=/srv/kronosnet/origin/main/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/main/
 else
  KRONOSNET_INSTALL_PATH=/srv/kronosnet/origin/stable1-proposed/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/camelback/
 fi

 PACEMAKER_INSTALL_PATH=/srv/pacemaker/origin/${pacemakerver}/

 # those projects only have main branch
 COROSYNC_QDEVICE_INSTALL_PATH=/srv/qdevice/origin/main/
 SBD_INSTALL_PATH=/srv/sbd/origin/main-pacemaker-${pacemakerver}/
 FENCE_AGENTS_INSTALL_PATH=/srv/fence-agents/origin/main/
 RESOURCE_AGENTS_INSTALL_PATH=/srv/resource-agents/origin/main/
 BOOTH_INSTALL_PATH=/srv/booth/origin/main-pacemaker-${pacemakerver}/

 case "$DEST" in
  corosync)
   # corosync supports both kronosnet stable and main
   # we need to test build both
   if [ -n "${kronosnetver}" ]; then
    KRONOSNET_INSTALL_PATH=/srv/kronosnet/origin/${kronosnetver}/
   fi
   ;;
  sbd|booth|pcs)
   # booth and sbd only have a main branch, but they need
   # different settings when building against pacemaker main or release
   if [ "${pacemakerver}" = "${PACEMAKER_RELEASE}" ]; then
    KRONOSNET_INSTALL_PATH=/srv/kronosnet/origin/stable1-proposed/
    COROSYNC_INSTALL_PATH=/srv/corosync/origin/camelback/
   fi
   ;;
 esac

 if [ -n "$KRONOSNET_INSTALL_PATH" ] && [ -d "$KRONOSNET_INSTALL_PATH" ]; then
  KRONOSNET_LIB=$(ls -1 $KRONOSNET_INSTALL_PATH | grep lib)
  KRONOSNET_CONFIG_PATH=$KRONOSNET_INSTALL_PATH/$KRONOSNET_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$KRONOSNET_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$KRONOSNET_INSTALL_PATH/$KRONOSNET_LIB/
  echo libknet build info: $(cat $KRONOSNET_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$KRONOSNET_CONFIG_PATH pkg-config --modversion libknet || true
 fi

 if [ -n "$LIBQB_INSTALL_PATH" ] && [ -d "$LIBQB_INSTALL_PATH" ]; then
  LIBQB_LIB=$(ls -1 $LIBQB_INSTALL_PATH | grep lib)
  LIBQB_CONFIG_PATH=$LIBQB_INSTALL_PATH/$LIBQB_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$LIBQB_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$LIBQB_INSTALL_PATH/$LIBQB_LIB/
  echo libqb build info: $(cat $LIBQB_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$LIBQB_CONFIG_PATH pkg-config --modversion libqb || true
 else
  echo using libqb as provided by OS
 fi

 if [ -n "$COROSYNC_INSTALL_PATH" ] && [ -d "$COROSYNC_INSTALL_PATH" ]; then
  if [ -d $COROSYNC_INSTALL_PATH/lib64/pkgconfig ]; then
   COROSYNC_LIB=lib64
  else
   COROSYNC_LIB=lib
  fi
  COROSYNC_CONFIG_PATH=$COROSYNC_INSTALL_PATH/$COROSYNC_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$COROSYNC_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$COROSYNC_INSTALL_PATH/$COROSYNC_LIB/
  echo corosync build info: $(cat $COROSYNC_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$COROSYNC_CONFIG_PATH pkg-config --modversion corosync || true
 fi

 if [ -n "$COROSYNC_QDEVICE_INSTALL_PATH" ] && [ -d "$COROSYNC_QDEVICE_INSTALL_PATH" ]; then
  if [ -d $COROSYNC_QDEVICE_INSTALL_PATH/lib64 ]; then
   COROSYNC_QDEVICE_LIB=lib64
  else
   COROSYNC_QDEVICE_LIB=lib
  fi
  COROSYNC_QDEVICE_CONFIG_PATH=$COROSYNC_QDEVICE_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$COROSYNC_QDEVICE_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$COROSYNC_QDEVICE_INSTALL_PATH/$COROSYNC_QDEVICE_LIB/
  echo corosync-qdevice build info: $(cat $COROSYNC_QDEVICE_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$COROSYNC_QDEVICE_CONFIG_PATH pkg-config --modversion corosync-qdevice || true
 fi

 if [ -n "$PACEMAKER_INSTALL_PATH" ] && [ -d "$PACEMAKER_INSTALL_PATH" ]; then
  if [ -d $PACEMAKER_INSTALL_PATH/lib64/pkgconfig ]; then
   PACEMAKER_LIB=lib64
  else
   PACEMAKER_LIB=lib
  fi
  PACEMAKER_CONFIG_PATH=$PACEMAKER_INSTALL_PATH/$PACEMAKER_LIB/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$PACEMAKER_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$PACEMAKER_INSTALL_PATH/$PACEMAKER_LIB/
  echo pacemaker build info: $(cat $PACEMAKER_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$PACEMAKER_CONFIG_PATH pkg-config --modversion pacemaker || true
 fi

 if [ -n "$SBD_INSTALL_PATH" ] && [ -d "$SBD_INSTALL_PATH" ]; then
  if [ -d $SBD_INSTALL_PATH/lib64 ]; then
   SBD_LIB=lib64
  else
   SBD_LIB=lib
  fi
  SBD_CONFIG_PATH=$SBD_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$SBD_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$SBD_INSTALL_PATH/$SBD_LIB/
  echo sbd build info: $(cat $SBD_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$SBD_CONFIG_PATH pkg-config --modversion sbd || true
 fi

 if [ -n "$FENCE_AGENTS_INSTALL_PATH" ] && [ -d "$FENCE_AGENTS_INSTALL_PATH" ]; then
  if [ -d $FENCE_AGENTS_INSTALL_PATH/lib64 ]; then
   FENCE_AGENTS_LIB=lib64
  else
   FENCE_AGENTS_LIB=lib
  fi
  FENCE_AGENTS_CONFIG_PATH=$FENCE_AGENTS_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$FENCE_AGENTS_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$FENCE_AGENTS_INSTALL_PATH/$FENCE_AGENTS_LIB/
  echo fence-agents build info: $(cat $FENCE_AGENTS_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$FENCE_AGENTS_CONFIG_PATH pkg-config --modversion fence-agents || true
 fi

 if [ -n "$RESOURCE_AGENTS_INSTALL_PATH" ] && [ -d "$RESOURCE_AGENTS_INSTALL_PATH" ]; then
  if [ -d $RESOURCE_AGENTS_INSTALL_PATH/lib64 ]; then
   RESOURCE_AGENTS_LIB=lib64
  else
   RESOURCE_AGENTS_LIB=lib
  fi
  RESOURCE_AGENTS_CONFIG_PATH=$RESOURCE_AGENTS_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$RESOURCE_AGENTS_CONFIG_PATH
  export EXTERNAL_LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH:$RESOURCE_AGENTS_INSTALL_PATH/$RESOURCE_AGENTS_LIB/
  echo resource-agents build info: $(cat $RESOURCE_AGENTS_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$RESOURCE_AGENTS_CONFIG_PATH pkg-config --modversion resource-agents || true
 fi

 if [ -n "$BOOTH_INSTALL_PATH" ] && [ -d "$BOOTH_INSTALL_PATH" ]; then
  BOOTH_CONFIG_PATH=$BOOTH_INSTALL_PATH/share/pkgconfig
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$BOOTH_CONFIG_PATH
  echo booth build info: $(cat $BOOTH_INSTALL_PATH/.build-info)
  PKG_CONFIG_PATH=$BOOTH_CONFIG_PATH pkg-config --modversion booth || true
 fi

else

 LIBQB_REPO=https://ci.kronosnet.org/builds/libqb-main-${NODE_NAME}.repo
 LIBQB_REPO_PATH=https://ci.kronosnet.org/builds/libqb/${NODE_NAME}/main/latest/

 DLM_REPO=https://ci.kronosnet.org/builds/dlm-main-${NODE_NAME}.repo
 DLM_REPO_PATH=https://ci.kronosnet.org/builds/dlm/${NODE_NAME}/main/latest/

 GFS2UTILS_REPO=https://ci.kronosnet.org/builds/gfs2-utils-main-${NODE_NAME}.repo
 GFS2UTILS_REPO_PATH=https://ci.kronosnet.org/builds/gfs2-utils/${NODE_NAME}/main/latest/

 COROSYNC_QDEVICE_REPO=https://ci.kronosnet.org/builds/corosync-qdevice-main-${NODE_NAME}.repo
 COROSYNC_QDEVICE_REPO_PATH=https://ci.kronosnet.org/builds/corosync-qdevice/${NODE_NAME}/main/latest/

 SBD_REPO=https://ci.kronosnet.org/builds/sbd-main-pacemaker-${pacemakerver}-${NODE_NAME}.repo
 SBD_REPO_PATH=https://ci.kronosnet.org/builds/sbd/${NODE_NAME}/main-pacemaker-${pacemakerver}/latest/

 FENCE_AGENTS_REPO=https://ci.kronosnet.org/builds/fence-agents-main-${NODE_NAME}.repo
 FENCE_AGENTS_REPO_PATH=https://ci.kronosnet.org/builds/fence-agents/${NODE_NAME}/main/latest/

 RESOURCE_AGENTS_REPO=https://ci.kronosnet.org/builds/resource-agents-main-${NODE_NAME}.repo
 RESOURCE_AGENTS_REPO_PATH=https://ci.kronosnet.org/builds/resource-agents/${NODE_NAME}/main/latest/

 BOOTH_REPO=https://ci.kronosnet.org/builds/booth-main-pacemaker-${pacemakerver}-${NODE_NAME}.repo
 BOOTH_REPO_PATH=https://ci.kronosnet.org/builds/booth/${NODE_NAME}/main-pacemaker-${pacemakerver}/latest/

 if [ "${target}" = "main" ]; then
  KRONOSNET_REPO=https://ci.kronosnet.org/builds/kronosnet-main-${NODE_NAME}.repo
  KRONOSNET_REPO_PATH=https://ci.kronosnet.org/builds/kronosnet/${NODE_NAME}/main/latest/
  COROSYNC_REPO=https://ci.kronosnet.org/builds/corosync-main-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://ci.kronosnet.org/builds/corosync/${NODE_NAME}/main/latest/
  PACEMAKER_REPO=https://ci.kronosnet.org/builds/pacemaker-main-${NODE_NAME}.repo
  PACEMAKER_REPO_PATH=https://ci.kronosnet.org/builds/pacemaker/${NODE_NAME}/main/latest/
 else
  KRONOSNET_REPO=https://ci.kronosnet.org/builds/kronosnet-stable1-proposed-${NODE_NAME}.repo
  KRONOSNET_REPO_PATH=https://ci.kronosnet.org/builds/kronosnet/${NODE_NAME}/stable1-proposed/latest/
  COROSYNC_REPO=https://ci.kronosnet.org/builds/corosync-camelback-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://ci.kronosnet.org/builds/corosync/${NODE_NAME}/camelback/latest/
  PACEMAKER_REPO="https://ci.kronosnet.org/builds/pacemaker-${PACEMAKER_RELEASE}-${NODE_NAME}.repo"
  PACEMAKER_REPO_PATH="https://ci.kronosnet.org/builds/pacemaker/${NODE_NAME}/${PACEMAKER_RELEASE}/latest/"
 fi

 case "$DEST" in
  corosync)
   # corosync supports both kronosnet stable and main
   # we need to test build both
   if [ -n "${kronosnetver}" ]; then
    KRONOSNET_REPO=https://ci.kronosnet.org/builds/kronosnet-${kronosnetver}-${NODE_NAME}.repo
    KRONOSNET_REPO_PATH=https://ci.kronosnet.org/builds/kronosnet/${NODE_NAME}/${kronosnetver}/latest/
   fi
   ;;
  sbd|booth|pcs)
   # booth and sbd only have a main branch, but they need
   # different settings when building against pacemaker main or release
   if [ "${pacemakerver}" = "${PACEMAKER_RELEASE}" ]; then
    KRONOSNET_REPO=https://ci.kronosnet.org/builds/kronosnet-stable1-proposed-${NODE_NAME}.repo
    KRONOSNET_REPO_PATH=https://ci.kronosnet.org/builds/kronosnet/${NODE_NAME}/stable1-proposed/latest/
    COROSYNC_REPO=https://ci.kronosnet.org/builds/corosync-camelback-${NODE_NAME}.repo
    COROSYNC_REPO_PATH=https://ci.kronosnet.org/builds/corosync/${NODE_NAME}/camelback/latest/
    PACEMAKER_REPO=https://ci.kronosnet.org/builds/pacemaker-${PACEMAKER_RELEASE}-${NODE_NAME}.repo
    PACEMAKER_REPO_PATH=https://ci.kronosnet.org/builds/pacemaker/${NODE_NAME}/${PACEMAKER_RELEASE}/latest/
   fi
   ;;
 esac

fi

export KRONOSNET_REPO
export KRONOSNET_REPO_PATH
export LIBQB_REPO
export LIBQB_REPO_PATH
export DLM_REPO
export DLM_REPO_PATH
export GFS2UTILS_REPO
export GFS2UTILS_REPO_PATH
export COROSYNC_REPO
export COROSYNC_REPO_PATH
export PACEMAKER_REPO
export PACEMAKER_REPO_PATH
export COROSYNC_QDEVICE_REPO
export COROSYNC_QDEVICE_REPO_PATH
export SBD_REPO
export SBD_REPO_PATH
export FENCE_AGENTS_REPO
export FENCE_AGENTS_REPO_PATH
export RESOURCE_AGENTS_REPO
export RESOURCE_AGENTS_REPO_PATH
export BOOTH_REPO
export BOOTH_REPO_PATH
