export PATH="$PATH:/root/ci-tools"

if [ -d /opt/coverity/bin ]; then
 export PATH=/opt/coverity/bin:$PATH
fi

echo ===== TOOLCHAIN INFO =====
export MAKE=make
if [ "${USEGMAKE}" = 1 ]; then
 export MAKE=gmake
fi
$MAKE --version || true

if [ -z "$compiler" ]; then
 compiler=gcc
fi
$compiler --version || true
ld --version || true
export CC=$compiler

if [ -z "$python" ]; then
 python=python3
fi
python=`which $python`
$python --version || true
export PYTHON=$python

echo ===== SOURCE TREE INFO =====

if [ -z "${ghprbActualCommit}" ]; then
 export TARGET=${GIT_BRANCH}
else
 export TARGET=${ghprbActualCommit}
fi
if [ -n "${ghprbPullId}" ] && [ "${ghprbPullId}" != 1 ]; then
 export TARGET="origin/${ghprbTargetBranch}"
fi
echo TARGET $TARGET

# rpm builds should use standard packages
if [ "$build" != "rpm" ]; then
 echo ===== PKG_CONFIG_PATH info =====

 # origin/master should use all master branches built
 # from sources
 if [ "$TARGET" = "origin/master" ]; then
  KNET_INSTALL_PATH=/srv/knet/origin/master/
  QB_INSTALL_PATH=/srv/qb/origin/master/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/master/
 else
  KNET_INSTALL_PATH=/srv/knet/origin/stable1-proposed/
  COROSYNC_INSTALL_PATH=/srv/corosync/origin/camelback/
 fi

 # pacemake special casing
 # pacemaker 2.0 should build against libqb master and corosync camelback
 if [ "$DEST" = "pcmk" ] && [ "$TARGET" = "origin/2.0" ]; then
  QB_INSTALL_PATH=/srv/qb/origin/master/
 fi

 KNET_LIB=$(ls -1 $KNET_INSTALL_PATH | grep lib)
 KNET_CONFIG_PATH=$KNET_INSTALL_PATH/$KNET_LIB/pkgconfig
 export EXTERNAL_CONFIG_PATH=$KNET_CONFIG_PATH
 echo libknet build info: $(cat $KNET_INSTALL_PATH/.build-info)
 PKG_CONFIG_PATH=$KNET_CONFIG_PATH pkg-config --modversion libknet

 if [ -n "$QB_INSTALL_PATH" ]; then
  QB_LIB=$(ls -1 $QB_INSTALL_PATH | grep lib)
  QB_CONFIG_PATH=$QB_INSTALL_PATH/$QB_LIB/pkgconfig
  echo libqb build info: $(cat $QB_INSTALL_PATH/.build-info)
  export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$QB_CONFIG_PATH
 else
  echo using libqb as provided by OS
 fi
 PKG_CONFIG_PATH=$QB_CONFIG_PATH pkg-config --modversion libqb

 COROSYNC_LIB=$(ls -1 $COROSYNC_INSTALL_PATH | grep lib)
 COROSYNC_CONFIG_PATH=$COROSYNC_INSTALL_PATH/$COROSYNC_LIB/pkgconfig
 export EXTERNAL_CONFIG_PATH=$EXTERNAL_CONFIG_PATH:$COROSYNC_CONFIG_PATH
 echo corosync build info: $(cat $COROSYNC_INSTALL_PATH/.build-info)
 PKG_CONFIG_PATH=$EXTERNAL_CONFIG_PATH pkg-config --modversion corosync
else
 if [ "${GIT_BRANCH}" = "origin/master" ]; then
  KNET_REPO=https://kronosnet.org/builds/knet-master-${NODE_NAME}.repo
  KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/master/latest/
  LIBQB_REPO=https://kronosnet.org/builds/libqb-master-${NODE_NAME}.repo
  LIBQB_REPO_PATH=https://kronosnet.org/builds/libqb/${NODE_NAME}/master/latest/
  COROSYNC_REPO=https://kronosnet.org/builds/corosync-master-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://kronosnet.org/builds/corosync/${NODE_NAME}/master/latest/
 else
  KNET_REPO=https://kronosnet.org/builds/knet-stable1-proposed-${NODE_NAME}.repo
  KNET_REPO_PATH=https://kronosnet.org/builds/knet/${NODE_NAME}/stable1-proposed/latest/
  COROSYNC_REPO=https://kronosnet.org/builds/corosync-camelback-${NODE_NAME}.repo
  COROSYNC_REPO_PATH=https://kronosnet.org/builds/corosync/${NODE_NAME}/camelback/latest/
 fi
fi

export KNET_REPO
export KNET_REPO_PATH
export LIBQB_REPO
export LIBQB_REPO_PATH
export COROSYNC_REPO
export COROSYNC_REPO_PATH
