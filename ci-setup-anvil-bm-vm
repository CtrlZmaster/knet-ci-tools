#!/bin/bash

set -e

BUILD="$1"
REPOSRC="$2"
ANVILSRC="$3"
BREAKPOINT="$4"

[ -z "$BREAKPOINT" ] && BREAKPOINT=none

case "$BUILD" in
 centos-8-stream)
  SRCURL=https://cloud.centos.org/centos/8-stream/x86_64/images/
  NAME="Centos 8 Stream"
  IMG="GenericCloud"
  KVMVAR="centos-stream8"
 ;;
 rhel-8)
  NAME="RHEL 8"
  KVMVAR="rhel8-unknown"
  CRED="/root/rh-cred"
 ;;
 *)
  echo "Unknown build: $BUILD"
  exit 1
 ;;
esac

ANVILDEPS=false
ALTEEVE=false
ALTEEVESTAGING=false

case "$REPOSRC" in
 ci)
  ANVILDEPS=true
 ;;
 enterprise)
  ALTEEVE=true
 ;;
 enterprise-staging)
  ALTEEVESTAGING=true
 ;;
 *)
  echo "Unknown repo src: $REPOSRC"
  exit 1
 ;;
esac

ANVIL=false

case "$ANVILSRC" in
 ci)
  ANVIL=true
 ;;
 none)
 ;;
 *)
  echo "Unknown anvil src: $ANVILSRC"
  exit 1
 ;;
esac

export DEPLOYDIR=/srv/anvil
TEMPLATESDIR="$HOME/ci-tools/anvil-config-templates"
export STRIKERS="an-striker01 an-striker02"
export NODES="an-a01n01 an-a01n02"
export DRNODES="an-a01dr01"
export ALLNODES="$STRIKERS $NODES $DRNODES"

if [ ! -d "$TEMPLATESDIR" ]; then
 echo "Error, unable to find anvil-config-templates in the current directory"
 exit 1
fi

mkdir -p "$DEPLOYDIR/images"
mkdir -p "$DEPLOYDIR/snapshots"
mkdir -p "$DEPLOYDIR/configs"

cd "$DEPLOYDIR/images"

if [ -n "$SRCURL" ]; then
 echo "Downloading latest $NAME cloud image"

 latestimage=$(lftp -e "cls -1 *${IMG}*; quit" "$SRCURL" 2>/dev/null | sort -u | tail -n 1)

 if [ -z "$latestimage" ]; then
  echo "Error determining latest $NAME cloud image"
  if [ ! -e "${BUILD}-latest.qcow2" ]; then
   echo "No local image found. ABORTING"
   exit 1
  fi
 fi

 if [ ! -f "$latestimage" ]; then
  wget -4 -O "$latestimage" "$SRCURL/$latestimage"
  rm -f "${BUILD}-latest.qcow2"
  ln -sf "$latestimage" "${BUILD}-latest.qcow2"
 fi
else
 if [ ! -h "${BUILD}-latest.qcow2" ]; then
  echo "Unable to find ${BUILD}-latest.qcow2 image in $DEPLOYDIR/images"
  exit 1
 fi
fi

echo "Destroying old VMs (if any)"

for i in $ALLNODES; do
 virsh destroy $i || true
 virsh undefine $i || true
done

echo "Creating nodes disks"

cd "$DEPLOYDIR/snapshots"
rm -rf *.qcow2
for i in $ALLNODES; do
 qemu-img create -b "$DEPLOYDIR/images/${BUILD}-latest.qcow2" -F qcow2 -f qcow2 "$i-vol.qcow2" 200G
 qemu-img create -f qcow2 "$i-vol2.qcow2" 200G
done

echo "Genering ssh keys and ssh config"

cd "$DEPLOYDIR/configs"

# sync IP and hostname if necessary
if [ ! -f "id_rsa" ]; then
 echo "Generaing ssh keys"
 ssh-keygen -t rsa -b 4096 -f id_rsa -C testing-key -N "" -q
 echo ""
fi
if [ ! -f $HOME/.ssh/config ]; then
 cat > $HOME/.ssh/config << EOF
Host 192.168.122.*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no

Host an-*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no
EOF
fi
rm -f $HOME/.ssh/known_hosts
ssh-keyscan github.com > $HOME/.ssh/known_hosts

# ifn ip network is defined in ci-tools/ci-setup-anvil-bm
# and ci-tools/anvil-config-templates/ network templates
echo "Generating VM network configs and updating /etc/hosts"
if [ ! -f /etc/hosts.anvil ]; then
 cp /etc/hosts /etc/hosts.anvil
else
 cp /etc/hosts.anvil /etc/hosts
fi

ipbase=2
for i in $ALLNODES; do
 IFNIP=192.168.122.$ipbase
 cat "$TEMPLATESDIR/anvil_striker_net_config.cfg" | \
  sed \
   -e "s#@IFNIP@#$IFNIP#g" \
   > "$DEPLOYDIR/configs/${i}_net_config.cfg"
  echo "$IFNIP ${i}.alteeve.com ${i}" >> /etc/hosts
  ipbase=$((ipbase + 1))
done

if [ -n "$CRED" ]; then
 if [ ! -f "$CRED" ]; then
  echo "Unable to access $CRED file"
  exit 1
 fi
 ORG=$(cat "$CRED" | grep ORG | awk '{print $2}')
 KEY=$(cat "$CRED" | grep KEY | awk '{print $2}')
 if [ -z "$ORG" ] || [ -z "$KEY" ]; then
  echo "CRED file should contain both KEY and ORG"
  exit 1
 fi
fi

if [ ! -f "/root/alteeve-key" ]; then
 echo "Unable to access alteeve-key"
 exit 1
fi

AKEY=$(cat /root/alteeve-key)

echo "Generating cloud-init configs"
SSHKEY="$(cat $DEPLOYDIR/configs/id_rsa.pub)"
for i in $ALLNODES; do
 case $i in
  *striker*)
   ANVILPKG="striker"
  ;;
  *a01n*)
   ANVILPKG="node"
  ;;
  *dr*)
   ANVILPKG="dr"
  ;;
 esac
 cat "$TEMPLATESDIR/anvil_cloud_init_${BUILD}.cfg" | \
  sed \
   -e "s#@HOSTNAME@#${i}#g" \
   -e "s#@BUILD@#${BUILD}#g" \
   -e "s#@SSHKEY@#${SSHKEY}#g" \
   -e "s#@KEY@#${KEY}#g" \
   -e "s#@ORG@#${ORG}#g" \
   -e "s#@AKEY@#${AKEY}#g" \
   -e "s#@ANVIL@#${ANVIL}#g" \
   -e "s#@ANVILDEPS@#${ANVILDEPS}#g" \
   -e "s#@ALTEEVE@#${ALTEEVE}#g" \
   -e "s#@ALTEEVESTAGING@#${ALTEEVESTAGING}#g" \
   -e "s#@ANVILPKG@# - anvil-${ANVILPKG}#g" \
   > "$DEPLOYDIR/configs/${i}_cloud_init.cfg"
done

echo "Generating cloud-init metadata and seed images"
for i in $ALLNODES; do
  rm -f "$DEPLOYDIR/snapshots/${i}-seed.img"
  echo "instance-id: $(uuidgen)" > "$DEPLOYDIR/configs/${i}-metadata"
  cloud-localds -v --network-config="$DEPLOYDIR/configs/${i}_net_config.cfg" "$DEPLOYDIR/snapshots/${i}-seed.img" "$DEPLOYDIR/configs/${i}_cloud_init.cfg" "$DEPLOYDIR/configs/${i}-metadata"
done

echo "Creating VMs"
# those have to match the ports down for Simengine bmc/storage
vmportbase=20100
monportbase=20200
storageportbase=20300

for i in $ALLNODES; do
 netconf="--network network:ifn1_bridge1,model=e1000 --network network:ifn1_bridge1,model=e1000 --network network:bcn1_bridge1,model=e1000 --network network:bcn1_bridge1,model=e1000"
 case $i in
  *striker*)
   qemu_command_list=()
  ;;
  *)
   netconf="$netconf --network network:sn1_bridge1,model=e1000 --network network:sn1_bridge1,model=e1000"
   qemu_command_list=(
     "-chardev socket,id=ipmi0,host=localhost,port=$vmportbase,reconnect=2"
     "-device ipmi-bmc-extern,id=bmc0,chardev=ipmi0"
     "-device isa-ipmi-bt,bmc=bmc0"
     "-serial mon:tcp::$monportbase,server,telnet,nowait"
     "-chardev socket,id=simengine-storage-tcp,host=localhost,port=$storageportbase,reconnect=2"
     "-device virtio-serial"
     "-device virtserialport,chardev=simengine-storage-tcp,name=systems.cdot.simengine.storage.net"
   )
   vmportbase=$((vmportbase + 1))
   monportbase=$((monportbase + 1))
   storageportbase=$((storageportbase + 1))
  ;;
 esac
 virt-install --name ${i} \
  --virt-type kvm --memory 16384 --vcpus 6 \
  --boot hd,menu=on \
  --disk path="$DEPLOYDIR/snapshots/${i}-seed.img",device=cdrom \
  --disk path="$DEPLOYDIR/snapshots/$i-vol.qcow2",device=disk \
  --disk path="$DEPLOYDIR/snapshots/$i-vol2.qcow2",device=disk \
  --graphics vnc \
  --os-type Linux --os-variant $KVMVAR \
  $netconf \
  --qemu-commandline="${qemu_command_list[*]}" \
  --noautoconsole 
done

echo "Waiting for nodes and cloud-init to complete full init"

bootdone=no
expected=0
error=0

for i in $ALLNODES; do
 expected=$((expected + 1))
done

while [ "$bootdone" = "no" ]; do
 actual=0
 for i in $ALLNODES; do
  status=$(ssh $i cloud-init status 2>/dev/null | awk '{print $NF}')
  echo "cloud-init status node $i: $status"
  if [ "$status" = "error" ]; then
   error=1
   ALLNODES=$(echo $ALLNODES | sed -e 's#'$i'##g')
   expected=$((expected - 1))
   echo "ERROR cloud init log for node $i:"
   ssh $i cat /var/log/cloud-init-output.log
   echo "---------------------------"
  fi
  if [ "$status" = "done" ]; then
   actual=$((actual + 1))
  fi
 done
 echo "$(date) actual: $actual expected: $expected"
 if [ "$actual" = "$expected" ]; then
  bootdone=yes
 else
  sleep 10
 fi
done

if [ "$error" = "1" ]; then
 exit 1
fi

## configure SimEngine to model current deployment.
## this has to be executed _after_ VMs are booted or
## commands for adding simengine servers/bmcs will fail.

echo "Building simengine model"

# create model
systemctl stop simengine-core
simengine-cli model drop

# based on simengine.git/setup/setup-anvil/model-anvil

# Create 2 outlets, one powers 'an-ups01' another one powers 'an-ups02'
simengine-cli model create outlet -k1 -x=-861 -y=-171
simengine-cli model create outlet -k2 -x=-861 -y=351
# DR
simengine-cli model create outlet -k=11 -x=-861 -y=-693

# Add 2 UPSs for strikers and nodes
simengine-cli model create ups -k=3 \
    --name=an-ups01 \
    --host=10.201.3.1 \
    --mask=255.255.0.0 \
    --port=161 \
    --interface="bcn1_bridge1" \
    --serial-number="SVPD4D5QTQ3V" \
    --mac-address="f2325a5b0824" \
    -x=-895 -y=-182

simengine-cli model create ups -k=4 \
    --name=an-ups02 \
    --host=10.201.3.2 \
    --mask=255.255.0.0 \
    --port=161 \
    --interface="bcn1_bridge1" \
    --serial-number="8IAIMD9RX6KZ" \
    --mac-address="8117f9db70d4" \
    -x=-895 -y=347

# Add 1 UPS for DR node
simengine-cli model create ups -k=12 \
    --name=an-ups03 \
    --host=10.201.3.3 \
    --mask=255.255.0.0 \
    --port=161 \
    --interface="bcn1_bridge1" \
    --serial-number="129562D8A6DA" \
    --mac-address="8117f9db70d5" \
    -x=-895 -y=-704

# Create 2 PDUs for striker and nodes (no PDU for DR)
simengine-cli model create pdu -k=5 \
    --name=an-pdu01 \
    --host=10.201.2.1 \
    --mask=255.255.0.0 \
    --port=161 \
    --interface="bcn1_bridge1" \
    --serial-number="AQ5AKU1OORAX" \
    --mac-address="37436ab3c583" \
    -x=-36 -y=-161

simengine-cli model create pdu -k=6 \
    --name=an-pdu02 \
    --host=10.201.2.2 \
    --mask=255.255.0.0 \
    --port=161 \
    --interface="bcn1_bridge1" \
    --serial-number="95SQW45SVIFX" \
    --mac-address="b7bc37aa4d83" \
    -x=-36 -y=567

# Add BMCs for nodes
# --vmport must be changed to match $SERVER_PORT_PREFIX+$SERVER_IPMI_PORT_PREFIX+$idx in create-vms script
# --storcli-port must be changed to match $SERVER_PORT_PREFIX+$SERVER_STORAGE_PORT_PREFIX+$idx in create-vms script
# --password must be updated to match password set during Anvil setup (don't push the updated password to remote!)
simengine-cli model create server-bmc -k=7 \
    --domain-name=an-a01n01 \
    --power-consumption=360 \
    --no-power-on-ac \
    --host=10.201.11.1 \
    --port=623 \
    --vmport=20100 \
    --storcli-port=20300 \
    -x=-162 -y=320 \
    --interface="bcn1_bridge1" \
    --user="admin" \
    --password="Initial1" \
    --sensor-def="/usr/share/simengine/enginecore/enginecore/model/presets/sensors.json"

simengine-cli model create server-bmc -k=8 \
    --domain-name=an-a01n02 \
    --power-consumption=360 \
    --no-power-on-ac \
    --host=10.201.11.2 \
    --port=623 \
    --vmport=20101 \
    --storcli-port=20301 \
    -x=-171 -y=86 \
    --interface="bcn1_bridge1" \
    --user="admin" \
    --password="Initial1" \
    --sensor-def="/usr/share/simengine/enginecore/enginecore/model/presets/sensors.json"

# DR
simengine-cli model create server-bmc -k=13 \
    --domain-name=an-a01dr01 \
    --power-consumption=360 \
    --no-power-on-ac \
    --host=10.201.11.3 \
    --port=623 \
    --vmport=20102 \
    --storcli-port=20302 \
    -x=-162 -y=-704 \
    --interface="bcn1_bridge1" \
    --user="admin" \
    --password="Initial1" \
    --sensor-def="/usr/share/simengine/enginecore/enginecore/model/presets/sensors.json"

# Add 2 Striker Servers
simengine-cli model create server -k=9 \
    --domain-name=an-striker01 \
    --power-consumption=240 \
    --psu-num=1 \
    -x=738 \
    -y=101

simengine-cli model create server -k=10 \
    --domain-name=an-striker02 \
    --power-consumption=240 \
    --psu-num=1 \
    -x=734 \
    -y=326

### Power Components
# connect outlets & UPSs
simengine-cli model power-link -s1 -d3   # {_Mains_}==>[an-ups01]
simengine-cli model power-link -s2 -d4   # {_Mains_}==>[an-ups02]
# dr
simengine-cli model power-link -s11 -d12 # {_Mains_}==>[an-ups03]

# connect ups & pdus
simengine-cli model power-link -s31 -d5  # [an-ups01]==>[an-pdu01]
simengine-cli model power-link -s41 -d6  # [an-ups02]==>[an-pdu02]

# Power up servers
simengine-cli model power-link -s51 -d72 # [an-pdu01]={port-1}=>{psu-2}=>[an-a01n01]
simengine-cli model power-link -s52 -d82 # [an-pdu01]={port-2}=>{psu-2}=>[an-a01n02]

simengine-cli model power-link -s61 -d71 # [an-pdu02]={port-1}=>{psu-1}=>[an-a01n01]
simengine-cli model power-link -s62 -d81 # [an-pdu02]={port-2}=>{psu-1}=>[an-a01n02]

# DR
simengine-cli model power-link -s121 -d131   # [an-ups03]={port-1}==>[an-a01dr01]={psu-1}
simengine-cli model power-link -s122 -d132   # [an-ups03]={port-2}==>[an-a01dr01]={psu-2}

# Power Up Striker Servers
simengine-cli model power-link -s58 -d91  # [an-pdu01]={port-8}=>{psu-1}=>[an-striker01]
simengine-cli model power-link -s68 -d101 # [an-pdu02]={port-8}=>{psu-1}=>[an-striker02]

systemctl start simengine-core

echo "Generating anvil striker auto config"

cp "$TEMPLATESDIR/anvil_striker_auto.cfg" "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
for i in $ALLNODES; do
 ifaces=5
 case $i in
  *striker*)
   ifaces=3
  ;;
 esac
 for x in $(seq 0 $ifaces); do
  mac="$(ssh $i ifconfig eth$x | grep ether | awk '{print $2}')"
  sed -i -e 's#@'$i'-eth'$x'@#'$mac'#g' "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
 done
done

rm -rf "$DEPLOYDIR/anvil-test-suite"
cd "$DEPLOYDIR"
git clone git@github.com:Alteeve/anvil-test-suite.git
cd anvil-test-suite
./run-tests -b $BREAKPOINT
cd /root/ci-tools

if [ -n "$KEY" ]; then
 for i in $ALLNODES; do
  ssh $i subscription-manager unregister
 done
fi

exit 0
