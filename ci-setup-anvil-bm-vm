#!/bin/bash

set -e

BUILD="$1"
REPOSRC="$2"
ANVILSRC="$3"
BREAKPOINT="$4"

[ -z "$BREAKPOINT" ] && BREAKPOINT=none

# fake it when building outside of CI
[ -z "$BUILD_NUMBER" ] && BUILD_NUMBER=0

case "$BUILD" in
 centos-8-stream)
  SRCURL=https://cloud.centos.org/centos/8-stream/x86_64/images/
  NAME="Centos 8 Stream"
  IMG="GenericCloud"
  KVMVAR="centos-stream8"
 ;;
 rhel-8)
  NAME="RHEL 8"
  KVMVAR="rhel8-unknown"
  CRED="/root/rh-cred"
 ;;
 *)
  echo "Unknown build: $BUILD"
  exit 1
 ;;
esac

ANVILDEPS=false
ALTEEVE=false
ALTEEVESTAGING=false

case "$REPOSRC" in
 ci)
  ANVILDEPS=true
 ;;
 enterprise)
  ALTEEVE=true
 ;;
 enterprise-staging)
  ALTEEVESTAGING=true
 ;;
 *)
  echo "Unknown repo src: $REPOSRC"
  exit 1
 ;;
esac

ANVIL=false

case "$ANVILSRC" in
 ci)
  ANVIL=true
 ;;
 none)
 ;;
 *)
  echo "Unknown anvil src: $ANVILSRC"
  exit 1
 ;;
esac

export DEPLOYDIR=/srv/anvil
TEMPLATESDIR="$HOME/ci-tools/anvil-config-templates"
export STRIKERS="an-striker01 an-striker02"
export NODES="an-a01n01 an-a01n02"
export DRNODES="an-a01dr01"
export CACHENODES="an-cache"
export ALLNODES="$STRIKERS $NODES $DRNODES"
export PGPASSWORD=supersecretpassword

if [ ! -d "$TEMPLATESDIR" ]; then
 echo "Error, unable to find anvil-config-templates in the current directory"
 exit 1
fi

if [ -n "$CRED" ]; then
 if [ ! -f "$CRED" ]; then
  echo "Unable to access $CRED file"
  exit 1
 fi
 ORG=$(cat "$CRED" | grep ORG | awk '{print $2}')
 KEY=$(cat "$CRED" | grep KEY | awk '{print $2}')
 if [ -z "$ORG" ] || [ -z "$KEY" ]; then
  echo "CRED file should contain both KEY and ORG"
  exit 1
 fi
fi

if [ ! -f "/root/alteeve-key" ]; then
 echo "Unable to access alteeve-key"
 exit 1
fi

AKEY=$(cat /root/alteeve-key)

mkdir -p "$DEPLOYDIR/images"
mkdir -p "$DEPLOYDIR/cache"
mkdir -p "$DEPLOYDIR/snapshots"
mkdir -p "$DEPLOYDIR/configs"

cd "$DEPLOYDIR/images"

if [ -n "$SRCURL" ]; then
 echo "Downloading latest $NAME cloud image"

 latestimage=$(lftp -e "set ssl:verify-certificate no; cls -1 *${IMG}*; quit" "$SRCURL" 2>/dev/null | sort -u | tail -n 1)

 if [ -z "$latestimage" ]; then
  echo "Error determining latest $NAME cloud image"
  if [ ! -e "${BUILD}-latest.qcow2" ]; then
   echo "No local image found. ABORTING"
   exit 1
  fi
 fi

 if [ ! -f "$latestimage" ]; then
  wget -4 -O "$latestimage" "$SRCURL/$latestimage"
  rm -f "${BUILD}-latest.qcow2"
  ln -sf "$latestimage" "${BUILD}-latest.qcow2"
 fi
else
 if [ ! -h "${BUILD}-latest.qcow2" ]; then
  echo "Unable to find ${BUILD}-latest.qcow2 image in $DEPLOYDIR/images"
  exit 1
 fi
fi

echo "Genering ssh keys and ssh config"

cd "$DEPLOYDIR/configs"

# sync IP and hostname if necessary
if [ ! -f "id_rsa" ]; then
 echo "Generaing ssh keys"
 ssh-keygen -t rsa -b 4096 -f id_rsa -C testing-key -N "" -q
 echo ""
fi

SSHKEY="$(cat $DEPLOYDIR/configs/id_rsa.pub)"

if [ ! -f $HOME/.ssh/config ]; then
 cat > $HOME/.ssh/config << EOF
Host 192.168.122.*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no

Host an-*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no
EOF
fi

rm -f $HOME/.ssh/known_hosts
ssh-keyscan github.com > $HOME/.ssh/known_hosts

echo "Destroying old VMs (if any)"

for i in $ALLNODES $CACHENODES; do
 virsh destroy $i || true
 virsh undefine $i || true
done

# update daily cache
# some code is similar to the one below, but itÂ´s not the same
echo "Generating daily cache"

updatecache=no
TODAY=$(date +%F)

cd "$DEPLOYDIR/cache"

if [ ! -f "${BUILD}-latest.qcow2-${TODAY}" ]; then
 echo "Updating daily cache for ${BUILD} ${TODAY}"
 rm -rf "${BUILD}-latest.qcow2*" "an-cache*"
 qemu-img create -b "$DEPLOYDIR/images/${BUILD}-latest.qcow2" -F qcow2 -f qcow2 "${BUILD}-latest.qcow2" 200G
 cat "$TEMPLATESDIR/anvil_striker_net_config.cfg" | sed -e "s#@IFNIP@#192.168.122.2#g" > an-cache_net_config.cfg
 cat "$TEMPLATESDIR/anvil_cloud_init_${BUILD}.cfg" | \
  sed \
   -e "s#@HOSTNAME@#an-cache#g" \
   -e "s#@BUILD@#${BUILD}#g" \
   -e "s#@SSHKEY@#${SSHKEY}#g" \
   -e "s#@KEY@#${KEY}#g" \
   -e "s#@ORG@#${ORG}#g" \
   -e "s#@AKEY@#${AKEY}#g" \
   -e "s#@ANVIL@#false#g" \
   -e "s#@ANVILDEPS@#false#g" \
   -e "s#@ALTEEVE@#false#g" \
   -e "s#@ALTEEVESTAGING@#false#g" \
   -e "s#@ANVILPKG@##g" \
   > "an-cache_cloud_init.cfg"
  rm -f "an-cache-seed.img"
  echo "instance-id: $(uuidgen)" > "an-cache-metadata"
  cloud-localds -v --network-config="an-cache_net_config.cfg" "an-cache-seed.img" "an-cache_cloud_init.cfg" "an-cache-metadata"
 echo "Done updating daily cache"
 virt-install --name an-cache \
  --virt-type kvm --memory 16384 --vcpus 6 \
  --boot hd,menu=on \
  --disk path="$DEPLOYDIR/cache/an-cache-seed.img",device=cdrom \
  --disk path="$DEPLOYDIR/cache/${BUILD}-latest.qcow2",device=disk \
  --graphics vnc \
  --os-type Linux --os-variant $KVMVAR \
  --network network:ifn1_bridge1,model=e1000 \
  --noautoconsole

 echo "Waiting for nodes and cloud-init to complete full init"

 bootdone=no
 expected=1
 error=0

 while [ "$bootdone" = "no" ]; do
  actual=0
  for i in 192.168.122.2; do
   status=$(ssh $i cloud-init status 2>/dev/null | awk '{print $NF}')
   echo "cloud-init status node $i: $status"
   if [ "$status" = "error" ]; then
    error=1
    expected=$((expected - 1))
    echo "ERROR cloud init log for node $i:"
    ssh $i cat /var/log/cloud-init-output.log
    echo "---------------------------"
   fi
   if [ "$status" = "done" ]; then
    actual=$((actual + 1))
   fi
  done
  echo "$(date) actual: $actual expected: $expected"
  if [ "$actual" = "$expected" ]; then
   bootdone=yes
  else
   sleep 10
  fi
 done

 # cleanup image
 # allow cloud-init to regenerate anvil/alteeve repos
 ssh 192.168.122.2 rm -f /etc/yum.repos.d/alteeve* /etc/yum.repos.d/anvil*
 if [ -n "$KEY" ]; then
  ssh 192.168.122.2 subscription-manager unregister
 fi

 if [ "$error" = "1" ]; then
  virsh destroy an-cache || true
  virsh undefine an-cache || true
  exit 1
 fi

 state=running
 virsh shutdown an-cache
 while ([ "$state" != "" ] && [ "$state" == "running" ]); do sleep 5; state=$(virsh dominfo an-cache | grep -w "State:" | awk '{ print $2}'); done;
 virsh undefine an-cache || true

 touch "${BUILD}-latest.qcow2-${TODAY}"
 # repeat to make sure known_hosts is clean after caching
 rm -f $HOME/.ssh/known_hosts
 ssh-keyscan github.com > $HOME/.ssh/known_hosts
fi

echo "Creating nodes disks"

cd "$DEPLOYDIR/snapshots"
rm -rf *.qcow2
for i in $ALLNODES; do
 qemu-img create -b "$DEPLOYDIR/cache/${BUILD}-latest.qcow2" -F qcow2 -f qcow2 "$i-vol.qcow2" 200G
 qemu-img create -f qcow2 "$i-vol2.qcow2" 200G
done

cd "$DEPLOYDIR/configs"

# ifn ip network is defined in ci-tools/ci-setup-anvil-bm
# and ci-tools/anvil-config-templates/ network templates
echo "Generating VM network configs and updating /etc/hosts"
if [ ! -f /etc/hosts.anvil ]; then
 cp /etc/hosts /etc/hosts.anvil
else
 cp /etc/hosts.anvil /etc/hosts
fi

ipbase=2
for i in $ALLNODES; do
 IFNIP=192.168.122.$ipbase
 cat "$TEMPLATESDIR/anvil_striker_net_config.cfg" | \
  sed \
   -e "s#@IFNIP@#$IFNIP#g" \
   > "$DEPLOYDIR/configs/${i}_net_config.cfg"
  echo "$IFNIP ${i}.alteeve.com ${i}" >> /etc/hosts
  ipbase=$((ipbase + 1))
done

echo "Generating cloud-init configs"
for i in $ALLNODES; do
 case $i in
  *striker*)
   ANVILPKG="striker"
  ;;
  *a01n*)
   ANVILPKG="node"
  ;;
  *dr*)
   ANVILPKG="dr"
  ;;
 esac
 cat "$TEMPLATESDIR/anvil_cloud_init_${BUILD}.cfg" | \
  sed \
   -e "s#@HOSTNAME@#${i}#g" \
   -e "s#@BUILD@#${BUILD}#g" \
   -e "s#@SSHKEY@#${SSHKEY}#g" \
   -e "s#@KEY@#${KEY}#g" \
   -e "s#@ORG@#${ORG}#g" \
   -e "s#@AKEY@#${AKEY}#g" \
   -e "s#@ANVIL@#${ANVIL}#g" \
   -e "s#@ANVILDEPS@#${ANVILDEPS}#g" \
   -e "s#@ALTEEVE@#${ALTEEVE}#g" \
   -e "s#@ALTEEVESTAGING@#${ALTEEVESTAGING}#g" \
   -e "s#@ANVILPKG@# - anvil-${ANVILPKG}#g" \
   > "$DEPLOYDIR/configs/${i}_cloud_init.cfg"
done

echo "Generating cloud-init metadata and seed images"
for i in $ALLNODES; do
  rm -f "$DEPLOYDIR/snapshots/${i}-seed.img"
  echo "instance-id: $(uuidgen)" > "$DEPLOYDIR/configs/${i}-metadata"
  cloud-localds -v --network-config="$DEPLOYDIR/configs/${i}_net_config.cfg" "$DEPLOYDIR/snapshots/${i}-seed.img" "$DEPLOYDIR/configs/${i}_cloud_init.cfg" "$DEPLOYDIR/configs/${i}-metadata"
done

echo "Creating VMs"
# those have to match the ports down for Simengine bmc/storage
vmportbase=20100
monportbase=20200
storageportbase=20300

for i in $ALLNODES; do
 netconf="--network network:ifn1_bridge1,model=e1000 --network network:ifn1_bridge1,model=e1000 --network network:bcn1_bridge1,model=e1000 --network network:bcn1_bridge1,model=e1000"
 case $i in
  *striker*)
   qemu_command_list=()
  ;;
  *)
   netconf="$netconf --network network:sn1_bridge1,model=e1000 --network network:sn1_bridge1,model=e1000"
   qemu_command_list=(
     "-chardev socket,id=ipmi0,host=localhost,port=$vmportbase,reconnect=2"
     "-device ipmi-bmc-extern,id=bmc0,chardev=ipmi0"
     "-device isa-ipmi-bt,bmc=bmc0"
     "-serial mon:tcp::$monportbase,server,telnet,nowait"
     "-chardev socket,id=simengine-storage-tcp,host=localhost,port=$storageportbase,reconnect=2"
     "-device virtio-serial"
     "-device virtserialport,chardev=simengine-storage-tcp,name=systems.cdot.simengine.storage.net"
   )
   vmportbase=$((vmportbase + 1))
   monportbase=$((monportbase + 1))
   storageportbase=$((storageportbase + 1))
  ;;
 esac
 virt-install --name ${i} \
  --virt-type kvm --memory 16384 --vcpus 6 \
  --boot hd,menu=on \
  --disk path="$DEPLOYDIR/snapshots/${i}-seed.img",device=cdrom \
  --disk path="$DEPLOYDIR/snapshots/$i-vol.qcow2",device=disk \
  --disk path="$DEPLOYDIR/snapshots/$i-vol2.qcow2",device=disk \
  --graphics vnc \
  --os-type Linux --os-variant $KVMVAR \
  $netconf \
  --qemu-commandline="${qemu_command_list[*]}" \
  --noautoconsole
done

echo "Waiting for nodes and cloud-init to complete full init"

bootdone=no
expected=0
error=0

for i in $ALLNODES; do
 expected=$((expected + 1))
done

while [ "$bootdone" = "no" ]; do
 actual=0
 for i in $ALLNODES; do
  status=$(ssh $i cloud-init status 2>/dev/null | awk '{print $NF}')
  echo "cloud-init status node $i: $status"
  if [ "$status" = "error" ]; then
   error=1
   ALLNODES=$(echo $ALLNODES | sed -e 's#'$i'##g')
   expected=$((expected - 1))
   echo "ERROR cloud init log for node $i:"
   ssh $i cat /var/log/cloud-init-output.log
   echo "---------------------------"
  fi
  if [ "$status" = "done" ]; then
   actual=$((actual + 1))
  fi
 done
 echo "$(date) actual: $actual expected: $expected"
 if [ "$actual" = "$expected" ]; then
  bootdone=yes
 else
  sleep 10
 fi
done

if [ "$error" = "1" ]; then
 exit 1
fi

$HOME/ci-tools/ci-setup-anvil-simengine

echo "Generating anvil striker auto config"

cp "$TEMPLATESDIR/anvil_striker_auto.cfg" "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
for i in $ALLNODES; do
 ifaces=5
 case $i in
  *striker*)
   ifaces=3
  ;;
 esac
 for x in $(seq 0 $ifaces); do
  mac="$(ssh $i ifconfig eth$x | grep ether | awk '{print $2}')"
  sed -i -e 's#@'$i'-eth'$x'@#'$mac'#g' "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
 done
done

rm -rf "$DEPLOYDIR/anvil-test-suite"
cd "$DEPLOYDIR"
git clone git@github.com:Alteeve/anvil-test-suite.git
cd anvil-test-suite
set +e
./run-tests -b $BREAKPOINT
ret=$?
set -e
cd /root/ci-tools

# collecting all build info
rm -rf $DEPLOYDIR/logs/$BUILD_NUMBER/
mkdir -p $DEPLOYDIR/logs/$BUILD_NUMBER/

cp $DEPLOYDIR/configs/anvil_striker_auto.cfg $DEPLOYDIR/logs/$BUILD_NUMBER/anvil_striker_auto.cfg

for i in $ALLNODES; do
 scp ${i}:/var/log/anvil.log $DEPLOYDIR/logs/$BUILD_NUMBER/${i}_anvil.log
done

for i in $STRIKERS; do
 pg_dumpall --host=${i} --username=postgres | gzip > $DEPLOYDIR/logs/$BUILD_NUMBER/${i}_anvil.db.gz || true
done

cd $DEPLOYDIR/logs/
tar zcvp -f $BUILD_NUMBER.tar.gz $BUILD_NUMBER/
mkdir -p /var/www/html/testing-logs
mv $BUILD_NUMBER.tar.gz /var/www/html/testing-logs/
cd -
rm -rf $DEPLOYDIR/logs/$BUILD_NUMBER/

echo "Complete anvil logs available here for download: http://anvil-ci-repo.kronosnet.org/testing-logs/$BUILD_NUMBER.tar.gz"

if [ "$ret" != "0" ]; then
 exit $ret
fi

if [ -n "$KEY" ]; then
 for i in $ALLNODES; do
  ssh $i subscription-manager unregister
 done
fi

exit 0
