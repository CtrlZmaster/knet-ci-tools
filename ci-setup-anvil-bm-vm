#!/bin/bash

set -e

VARIANT="$1"

case "$VARIANT" in
 centos-8-stream)
  SRCURL=https://cloud.centos.org/centos/8-stream/x86_64/images/
  NAME="Centos 8 Stream"
  IMG="GenericCloud"
  BUILD="centos-8-stream"
 ;;
 centos-8)
  SRCURL=https://cloud.centos.org/centos/8/x86_64/images/
  NAME="Centos 8"
  IMG="GenericCloud"
  BUILD="centos-8"
 ;;
 *)
  echo "Unknown variant"
  exit 1
 ;;
esac

DEPLOYDIR=/srv/anvil
TEMPLATESDIR="$HOME/ci-tools/anvil-config-templates"
STRIKERS="an-striker01 an-striker02"
NODES="an-a01n01 an-a01n02"
DRNODES="an-a01dr01"
ALLNODES="$STRIKERS $NODES $DRNODES"

if [ ! -d "$TEMPLATESDIR" ]; then
 echo "Error, unable to find anvil-config-templates in the current directory"
 exit 1
fi

mkdir -p "$DEPLOYDIR/images"
mkdir -p "$DEPLOYDIR/snapshots"
mkdir -p "$DEPLOYDIR/configs"

echo "Downloading latest $NAME cloud image"

cd "$DEPLOYDIR/images"

latestimage=$(lftp -e "cls -1 *${IMG}*; quit" "$SRCURL" 2>/dev/null | sort -u | tail -n 1)

if [ -z "$latestimage" ]; then
 echo "Error determining latest $NAME cloud image"
 if [ ! -e "${BUILD}-latest.qcow2" ]; then
  echo "No local image found. ABORTING"
  exit 1
 fi
fi

if [ ! -f "$latestimage" ]; then
 wget -O "$latestimage" "$SRCURL/$latestimage"
 rm -f "${BUILD}-latest.qcow2"
 ln -sf "$latestimage" "${BUILD}-latest.qcow2"
fi

echo "Destroying old VMs (if any)"

for i in $ALLNODES; do
 virsh destroy $i || true
 virsh undefine $i || true
done

echo "Creating nodes disks"

cd "$DEPLOYDIR/snapshots"
rm -rf *.qcow2
for i in $ALLNODES; do
 qemu-img create -b "$DEPLOYDIR/images/${BUILD}-latest.qcow2" -F qcow2 -f qcow2 "$i-vol.qcow2" 200G
 qemu-img create -f qcow2 "$i-vol2.qcow2" 200G
done

echo "Genering ssh keys and ssh config"

cd "$DEPLOYDIR/configs"

# sync IP and hostname if necessary
if [ ! -f "id_rsa" ]; then
 echo "Generaing ssh keys"
 ssh-keygen -t rsa -b 4096 -f id_rsa -C testing-key -N "" -q
 echo ""
fi
if [ ! -f $HOME/.ssh/config ]; then
 cat > $HOME/.ssh/config << EOF
Host 192.168.122.*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no

Host an-*
User root
StrictHostKeyChecking no
IdentityFile /srv/anvil/configs/id_rsa
ForwardX11 no
EOF
fi
rm -f $HOME/.ssh/known_hosts

# ifn ip network is defined in ci-tools/ci-setup-anvil-bm
# and ci-tools/anvil-config-templates/ network templates
echo "Generating VM network configs and updating /etc/hosts"
if [ ! -f /etc/hosts.anvil ]; then
 cp /etc/hosts /etc/hosts.anvil
else
 cp /etc/hosts.anvil /etc/hosts
fi

ipbase=2
for i in $ALLNODES; do
 IFNIP=192.168.122.$ipbase
 cat "$TEMPLATESDIR/anvil_striker_net_config.cfg" | \
  sed \
   -e "s#@IFNIP@#$IFNIP#g" \
   > "$DEPLOYDIR/configs/${i}_net_config.cfg"
  echo "$IFNIP ${i}.alteeve.com ${i}" >> /etc/hosts
  ipbase=$((ipbase + 1))
done

echo "Generating cloud-init configs"
SSHKEY="$(cat $DEPLOYDIR/configs/id_rsa.pub)"
for i in $ALLNODES; do
 case $i in
  *striker*)
   ANVILPKG="striker"
  ;;
  *a01n*)
   ANVILPKG="node"
  ;;
  *dr*)
   ANVILPKG="dr"
  ;;
 esac
 cat "$TEMPLATESDIR/anvil_cloud_init.cfg" | \
  sed \
   -e "s#@HOSTNAME@#${i}#g" \
   -e "s#@BUILD@#${BUILD}#g" \
   -e "s#@SSHKEY@#${SSHKEY}#g" \
   -e "s#@ANVILPKG@# - anvil-${ANVILPKG}#g" \
   > "$DEPLOYDIR/configs/${i}_cloud_init.cfg"
done

echo "Generating cloud-init metadata and seed images"
for i in $ALLNODES; do
  rm -f "$DEPLOYDIR/snapshots/${i}-seed.img"
  echo "instance-id: $(uuidgen)" > "$DEPLOYDIR/configs/${i}-metadata"
  cloud-localds -v --network-config="$DEPLOYDIR/configs/${i}_net_config.cfg" "$DEPLOYDIR/snapshots/${i}-seed.img" "$DEPLOYDIR/configs/${i}_cloud_init.cfg" "$DEPLOYDIR/configs/${i}-metadata"
done

# use uuid for db?
echo "Creating VMs"
for i in $ALLNODES; do
 netconf="--network network:ifn1_bridge1 --network network:ifn1_bridge1 --network network:bcn1_bridge1 --network network:bcn1_bridge1"
 case $i in
  *striker*)
  ;;
  *)
   netconf="$netconf --network network:sn1_bridge1 --network network:sn1_bridge1"
  ;;
 esac
 virt-install --name ${i} \
  --virt-type kvm --memory 16384 --vcpus 6 \
  --boot hd,menu=on \
  --disk path="$DEPLOYDIR/snapshots/${i}-seed.img",device=cdrom \
  --disk path="$DEPLOYDIR/snapshots/$i-vol.qcow2",device=disk \
  --disk path="$DEPLOYDIR/snapshots/$i-vol2.qcow2",device=disk \
  --graphics vnc \
  --os-type Linux --os-variant centos-stream8 \
  $netconf \
  --noautoconsole 
done

echo "Waiting for nodes and cloud-init to complete full init"

bootdone=no
expected=0
for i in $ALLNODES; do
 expected=$((expected + 1))
done

while [ "$bootdone" = "no" ]; do
 actual=0
 for i in $ALLNODES; do
  status=$(ssh $i cloud-init status 2>/dev/null | awk '{print $NF}')
  echo "cloud-init status node $i: $status"
  if [ "$status" = "error" ]; then
   exit 1
  fi
  if [ "$status" = "done" ]; then
   actual=$((actual + 1))
  fi
 done
 echo "$(date) actual: $actual expected: $expected"
 if [ "$actual" = "$expected" ]; then
  bootdone=yes
 else
  sleep 10
 fi
done

cp "$TEMPLATESDIR/anvil_striker_auto.cfg" "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
for i in $ALLNODES; do
 ifaces=5
 case $i in
  *striker*)
   ifaces=3
  ;;
 esac
 for x in $(seq 0 $ifaces); do
  mac="$(ssh $i ifconfig eth$x | grep ether | awk '{print $2}')"
  sed -i -e 's#@'$i'-eth'$x'@#'$mac'#g' "$DEPLOYDIR/configs/anvil_striker_auto.cfg"
 done
done

for i in $STRIKERS; do
 scp "$DEPLOYDIR/configs/anvil_striker_auto.cfg" ${i}:/tmp/
done

for i in $STRIKERS; do
 ssh $i striker-auto-initialize-all --config /tmp/anvil_striker_auto.cfg
done

export PGPASSWORD=supersecretpassword

for i in $STRIKERS; do
 while [ "$(psql --host=an-striker01 --username=postgres anvil -t -c "SELECT a.host_name, b.variable_value FROM hosts a, variables b WHERE a.host_uuid = b.variable_source_uuid AND b.variable_name = 'system::configured' ORDER BY host_name ASC;" |grep altee | grep 1$ | wc -l)" != $expected ]; do
  echo "Waiting for nodes to join the database"
  sleep 10
 done
done

for i in $STRIKERS; do
 while [ "$(psql --host=an-striker01 --username=postgres anvil -t -c "SELECT a.host_name AS node1, b.host_name AS node2, c.host_name AS dr1, d.anvil_name FROM hosts a, hosts b, hosts c, anvils d WHERE a.host_uuid = d.anvil_node1_host_uuid AND b.host_uuid = d.anvil_node2_host_uuid AND c.host_uuid = d.anvil_dr1_host_uuid;" |grep altee | wc -l)" != 1 ]; do
  echo "Waiting for job to complete"
  sleep 10
 done
done

for i in $NODES; do
 while ! ssh $i pcs status | grep -q Online; do
  echo "Waiting for pacemaker to be active on the nodes"
  sleep 10
 done
done

exit 0
