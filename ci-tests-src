#!/bin/sh

set -ev

. $HOME/ci-tools/ci-rpm-common

cleanlibqb() {
 # libqb test suite will leave craft behind in case of failures
 # make sure to clean before and after the test run
 # this code works because we do NOT allow multiple builds of libqb
 # in parallel!
 if [ "$DESTS" = libqb ]; then
  if [ -d "/dev/shm" ]; then
   find /dev/shm -name qb-\*-test\* | xargs rm -rf
  fi
  find /tmp -type d -name libqb\* | xargs rm -rf
 fi
}

fasextratests() {
 # fence-agents extra tests
 if [ "$DEST" = fas ]; then
  if [ -d fence/agents/lib ]; then
   PYTHONPATH=fence/agents/lib $PYTHON fence/agents/lib/tests/test_fencing.py
  else
   PYTHONPATH=lib $PYTHON lib/tests/test_fencing.py
  fi
 fi
}

pcmkextratests() {
 # pacemaker extra tests
 if [ "$DEST" != pcmk ]; then
  return
 fi

 if [ "$build" = "rpm" ]; then
  make -C rpm rpmlint
 else
  ./cts/cts-regression -V
 fi
}

case $build in
 rpm)
  exit 0
  ;;
 coverity)
  echo "===== CURRENT COVERITY SCAN ERRORS ====="
  cat cov.txt
  echo "===== END CURRENT COVERITY SCAN ERRORS ====="

  # TODO: fix pagure coverity handling once we move to new pipelines
  case "$DEST" in
   gfs2-util*|dlm|ci-test-pagure)
    echo "Complete html report can be found here: https://ci.kronosnet.org/coverity/$DEST/${NODE_NAME}/${BUILD_NUMBER}/"
    exit 0
   ;;
  esac

  ret=0
  # this will trigger only with build-after-merge
  if [ "${install}" = 1 ]; then
   mkdir -p /srv/covscan/$DEST/$GIT_BRANCH/$extraver/
   mv cov.json cov.txt /srv/covscan/$DEST/$GIT_BRANCH/$extraver/
  else
   if [ ! -d /srv/covscan/$DEST/$CITARGET ]; then
    echo "WARNING: target branch $CITARGET no available for compare. Skipping."
    exit 0
   fi
   csdiff -xc --no-color /srv/covscan/$DEST/$CITARGET/$extraver/cov.json cov.json > cov.diff
   errors="$(cat cov.diff | grep ^Error: | wc -l)"
   if [ "$errors" -ne "0" ]; then
    echo "===== NEW COVERITY SCAN ERRORS FIXED ====="
    cat cov.diff
    echo "===== END NEW COVERITY SCAN ERRORS FIXED ====="
   fi
   csdiff -c --no-color /srv/covscan/$DEST/$CITARGET/$extraver/cov.json cov.json > cov.diff
   errors="$(cat cov.diff | grep ^Error: | wc -l)"
   if [ "$errors" -ne "0" ]; then
    echo "===== NEW COVERITY SCAN ERRORS DETECTED ====="
    cat cov.diff
    echo "===== END NEW COVERITY SCAN ERRORS DETECTED ====="
    ret=1
    cat cov.diff | cshtml - > cov-index.html
    echo "New errors can be found here: https://ci.kronosnet.org/coverity/$DEST/${NODE_NAME}/${BUILD_NUMBER}/new/"
   fi
  fi
  echo "Complete html report can be found here: https://ci.kronosnet.org/coverity/$DEST/${NODE_NAME}/${BUILD_NUMBER}/"

  exit $ret
  ;;
 crosscompile)
  if [ "$(find . -print -type f -exec file {} \; | grep ELF | grep $ARCH | wc -l)" = 0 ]; then
   echo "Crosscompilation test failed. Unable to find any $ARCH binaries"
   exit 1
  fi
  exit 0
  ;;
 *)
  ;;
esac

if [ -n "$CHECKS" ] && [ "$CHECKS" = "nochecks" ]; then
 exit 0
fi

# blacklist PARALLELMAKE as necessary
case "$DEST" in
 knet|pcs)
  export PARALLELMAKE=""
 ;;
esac

case "$DEST" in
 pcs)
  case "${NODE_NAME}" in
   debian*|ubuntu*)
    localbuild=""
    ;;
   *)
    localbuild=--enable-local-build
    ;;
  esac
  if [ -f .venv/bin/activate ]; then
   . .venv/bin/activate
   export PATH="$(pwd)/.venv"/bin/:$PATH
  fi
  make $PARALLELMAKE check
  make $PARALLELMAKE distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-parallel-tests --enable-destructive-tests $localbuild $DISTROCONFOPTS PKG_CONFIG_PATH=$EXTERNAL_CONFIG_PATH"
  exit 0
 ;;
 booth)
  extraopts="--with-ocfdir=\$$\{prefix\}/lib/ocf"
 ;;
 knet|corosync)
  if [ -n "$RUSTBINDINGS" ] && [ "$RUSTBINDINGS" = yes ]; then
   extraopts="--enable-rust-bindings"
  fi
 ;;
esac

if [ -z "$CHECKS" ]; then
 CHECKS="check distcheck $EXTRACHECKS"
fi

if [ -n "$TESTUSELDPATH" ] && [ "$TESTUSELDPATH" = yes ]; then
 echo "export LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH"
 export LD_LIBRARY_PATH=$EXTERNAL_LD_LIBRARY_PATH
fi

for i in $CHECKS; do
 cleanlibqb
 echo "$MAKE $PARALLELMAKE $MAKETESTOPTS $i DISTCHECK_CONFIGURE_FLAGS="$extraopts $DISTROCONFOPTS" PKG_CONFIG_PATH=$EXTERNAL_CONFIG_PATH || (find . -name "*test*suite.log" -exec cat {} \; ; false)"
 $MAKE $PARALLELMAKE $MAKETESTOPTS $i DISTCHECK_CONFIGURE_FLAGS="$extraopts $DISTROCONFOPTS" PKG_CONFIG_PATH=$EXTERNAL_CONFIG_PATH || (find . -name "*test*suite.log" -exec cat {} \; ; false)
done

cleanlibqb
fasextratests
pcmkextratests
