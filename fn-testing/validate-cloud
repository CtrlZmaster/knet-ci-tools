#!/bin/bash

set -e

if ! which vapor >/dev/null 2>&1; then
	echo "Failure to find vapor binary"
	exit 1
fi

cd $(dirname $0)

# set defaults
command=""
provider=""
rhelver=""
nodes="4"
zstream="no"
brewbuild=""
upstream="none"
tests="setup"
teststags=""
debug=""
post=""
jobid=""
buildnum=""
customrepopath=""
iscsisize="0"
blocksize="0"
testlogdir=""
project=""

# hardcoded sizing for now
links="1"

print_usage() {
	echo "$(basename $0)"
	echo ""
	echo "usage:"
	echo ""
	echo "$(basename $0) command [options]"
	echo " -c command                 command: del, create, deploy, test, ssh, ip, reboot (required)"
	echo " -p provider                cloud provider: az, gcp, libvirtd, ocpv, osp (required)"
	echo " -r rhelver                 rhel version: 7, 8, 9 (required)"
	echo " -z                         use zstream (default: none)"
	echo " -m                         use custom repo (default: none)"
	echo " -x                         brew build (default: none)"
	echo " -u upstream                upstream branch: next-stable, next-stable-kernel, main, main-kernel (default: none)"
	echo " -n nodes                   cluster nodes: 0, 32 (default: 4)"
	echo " -i size                    iscsi storage size (default: 10)"
	echo " -s size                    shared block storage size (default: 10)"
	echo " -T tests tags              tests: all, smoketests, or tests in vedder format"
	echo " -t tests                   tests: all, smoketests, or tests in vedder format"
	echo "                            default: setup for normal test invocation"
	echo " -a                         set path to store test logs (default: none)"
	echo " -e                         export results to CQE (default: off)"
	echo " -d                         enable debug (default: off)"
	echo " -j                         jobid (default: '')"
	echo " -b                         buildnumber (default: '')"
	echo " -P                         project identifier (default: '')"
}

while getopts "j:c:p:m:r:n:u:t:T:z:edhi:s:b:a:P:x:" optflag; do
	case "$optflag" in
	c)
		command="$OPTARG"
		;;
	p)
		provider="$OPTARG"
		;;
	r)
		rhelver="$OPTARG"
		;;
	n)
		nodes="$OPTARG"
		;;
	u)
		upstream="$OPTARG"
		;;
	T)
		teststags="$OPTARG"
		;;
	t)
		tests="$OPTARG"
		;;
	j)
		jobid="$OPTARG"
		;;
	b)
		buildnum="$OPTARG"
		;;
	z)
		zstream="$OPTARG"
		;;
	x)
		brewbuild="$OPTARG"
		;;
	d)
		debug="yes"
		;;
	e)
		post=""
		;;
	i)
		iscsisize="$OPTARG"
		;;
	s)
		blocksize="$OPTARG"
		;;
	m)
		customrepopath="$OPTARG"
		;;
	a)
		testlogdir="$OPTARG"
		;;
	P)
		project="$OPTARG"
		;;
	h)
		print_usage
		exit 0
		;;
	\?|:)
		print_usage
		exit 0
		;;
	esac
done

if [ -z "$command" ]; then
	echo "Error: -c command required"
	print_usage
	exit 1
fi

if [ -z "$provider" ]; then
	echo "Error: -p provider required"
	print_usage
	exit 1
fi

if [ -z "$rhelver" ]; then
	echo "Error: -r rhelver required"
	print_usage
	exit 1
fi

if [ ! -f ./${provider}.defaults ]; then
	echo "Provider $provider defaults not configured"
	exit 1
fi

if [ ! -f ./${provider}.auth ]; then
	echo "Provider $provider authentication not configured"
	exit 1
fi

if [ ! -f ./${provider}.rhel${rhelver} ]; then
	echo "Provider $provider rhel${rhelver} not supported"
	exit 1
fi

if [ -n "${customrepopath}" ] && [ ! -d ${customrepopath} ]; then
	echo "custom repo ${customrepopath} not found"
	exit 1
fi

# load auth options
. ./${provider}.defaults

# load auth options
. ./${provider}.auth

# load per provider / rhelver create/deploy/test options
. ./${provider}.rhel${rhelver}

createbaseopts="--nodes $nodes"
deploybaseopts=""

if [ "$iscsisize" = "0" ] && [ -n "$defaultiscsi" ]; then
	iscsisize="$defaultiscsi"
fi
if [ "$iscsisize" != "0" ]; then
	createbaseopts="$createbaseopts --iscsi $iscsisize"
	deploybaseopts="$deploybaseopts --iscsi $iscsisize"
fi
if [ "$defaultuseiscsi" = "yes" ]; then
	deploybaseopts="$deploybaseopts --useiscsi"
fi

if [ "$blocksize" = "0" ] && [ -n "$defaultblocksize" ]; then
	blocksize="$defaultblocksize"
fi
if [ "$blocksize" != "0" ]; then
	createbaseopts="$createbaseopts --block $blocksize"
fi

if [ "$upstream" != "none" ]; then
	deploybaseopts="$deploybaseopts --useupstreamrepo $upstream"
fi
if [ "$zstream" == "yes" ]; then
	deploybaseopts="$deploybaseopts --usezstream"
fi
if [ "$customrepopath" != "" ]; then
	deploybaseopts="$deploybaseopts --usecustomrepo $customrepopath"
fi
if [ "$brewbuild" != "" ]; then
	deploybaseopts="$deploybaseopts --package $brewbuild"
fi

testbaseopts=""
if [ "$jobid" != "" ]; then
	testbaseopts="$testbaseopts -j $jobid"
fi
if [ "$post" != "" ]; then
	testbaseopts="$testbaseopts --post-results"
fi
if [ "$testlogdir" != "" ]; then
	testbaseopts="$testbaseopts --collect-debug-dir=$testlogdir --collect-debug-always"
fi

# generic log options, debug off by default
logopts="--verbose --nocolorlog"
if [ "$debug" != "" ]; then
	logopts="$logopts --debug"
fi

# generate cluster name
if [ "$buildnum" != "" ]; then
	buildnum="j$buildnum"
fi
clusteropts="--cluster ${project}${provider}c${rhelver}${buildnum}"

# put all options together
options="--provider $provider $authopts $clusteropts $logopts"

cloud_delete() {
	vapor delete $options
}

cloud_create() {
	# perform provider specific setup
	${provider}_setup
	vapor create $options $createbaseopts $createopts
}

cloud_deploy() {
	vapor deploy $options $deploybaseopts $deployopts
}

cloud_test() {
	testtype="$1"

	callopts="-t"
	if [ "$testtype" = "tags" ]; then
		callopts="-T"
	fi

	vapor test $options $testbaseopts --nodes $nodes $testopts $callopts "$tests"
}

cloud_reboot() {
	vapor reboot $options
}

cloud_ip_info() {
	vapor get --provider $provider $authopts $clusteropts --ip-address
}

cloud_ssh_info() {
	vapor get --provider $provider $authopts $clusteropts --ssh
	vapor get --provider $provider $authopts $clusteropts --scp
}

ret=0

case "$command" in
del|delete)
	cloud_delete
	ret=$?
	;;
create)
	cloud_create
	ret=$?
	;;
deploy)
	cloud_deploy
	ret=$?
	;;
test)
	if [ -n "$teststags" ]; then
		tests="$teststags"
		cloud_test tags
	else
		cloud_test test
	fi
	ret=$?
	;;
reboot)
	cloud_reboot
	ret=$?
	;;
ssh)
	cloud_ssh_info
	;;
ip)
	cloud_ip_info
	;;
*)
	echo "unknown command: $command"
	print_usage
	ret=1
	;;
esac

exit $ret
