#!/bin/bash

set -e

if ! which vapor >/dev/null 2>&1; then
	echo "Failure to find vapor binary"
	exit 1
fi

# set defaults
command=""
provider=""
rhelver=""
nodes="4"
forcenodes="no"
zstream=""
upstream=""
tests="setup"
teststags=""
debug=""
post=""
jobid=""
testvariant="default"
customrepopath=""

# hardcoded sizing for now
iscsisize="10"
blocksize="10"
links="1"

print_usage() {
	echo "$(basename $0)"
	echo ""
	echo "usage:"
	echo ""
	echo "$(basename $0) command [options]"
	echo " -c command                 command: del, create, deploy, test, ssh, reboot, validate (required)"
	echo " -p provider                cloud provider: osp, gcp, libvirtd, az (required)"
	echo " -r rhelver                 rhel version: 8, 9 (required)"
	echo " -z                         use zstream (default: none)"
	echo " -m                         use custom repo (default: none)"
	echo " -u upstream                upstream branch: next-stable, next-stable-kernel, main, main-kernel (default: none)"
	echo " -n nodes                   cluster nodes: 0, 32 (default: 4)"
	echo " -f force nodes             restric testing to only selected number of nodes"
	echo " -i size                    iscsi storage size (default: 10)"
	echo " -s size                    shared block storage size (default: 10)"
	echo " -k variant                 test variant default, kernel, kernel-full (default: default)"
	echo " -T tests tags              tests: all, smoketests, or tests in vedder format"
	echo " -t tests                   tests: all, smoketests, or tests in vedder format"
	echo "                            default: setup for normal test invocation"
	echo "                            default: all for validate test invocation"
	echo " -e                         export results to CQE (default: off)"
	echo " -d                         enable debug (default: off)"
	echo " -j                         jobid (default: '')"
}

while getopts "j:c:p:m:r:n:u:t:T:zefdhi:s:k:" optflag; do
	case "$optflag" in
	c)
		command="$OPTARG"
		;;
	p)
		provider="$OPTARG"
		;;
	r)
		rhelver="$OPTARG"
		;;
	n)
		nodes="$OPTARG"
		;;
	u)
		upstream="$OPTARG"
		;;
	T)
		teststags="$OPTARG"
		;;
	t)
		tests="$OPTARG"
		;;
	j)
		jobid="$OPTARG"
		;;
	z)
		zstream="yes"
		;;
	d)
		debug="yes"
		;;
	e)
		post="yes"
		;;
	i)
		iscsisize="$OPTARG"
		;;
	s)
		blocksize="$OPTARG"
		;;
	k)
		testvariant="$OPTARG"
		;;
	m)
		customrepopath="$OPTARG"
		;;
	f)
		forcenodes="yes"
		;;
	h)
		print_usage
		exit 0
		;;
	\?|:)
		print_usage
		exit 0
		;;
	esac
done

if [ -z "$command" ]; then
	echo "Error: -c command required"
	print_usage
	exit 1
fi

if [ -z "$provider" ]; then
	echo "Error: -p provider required"
	print_usage
	exit 1
fi

if [ -z "$rhelver" ]; then
	echo "Error: -r rhelver required"
	print_usage
	exit 1
fi

if [ ! -f ./${provider}.auth ]; then
	echo "Provider $provider authentication not configured"
	exit 1
fi

if [ ! -f ./${provider}.rhel${rhelver} ]; then
	echo "Provider $provider rhel${rhelver} not supported"
	exit 1
fi

if [ ! -f ./tests.${testvariant} ]; then
	echo "tests variant file ${testvariant} does not exist"
	exit 1
fi

if [ -n "${customrepopath}" ] && [ ! -d ${customrepopath} ]; then
	echo "custom repo ${customrepopath} not found"
	exit 1
fi

createbaseopts="--nodes $nodes --iscsi $iscsisize --block $blocksize"
deploybaseopts="--useiscsi --iscsi $iscsisize"
if [ "$upstream" != "" ]; then
	deploybaseopts="$deploybaseopts --useupstreamrepo $upstream"
fi
if [ "$zstream" != "" ]; then
	deploybaseopts="$deploybaseopts --usezstream"
fi
if [ "$customrepopath" != "" ]; then
	deploybaseopts="$deploybaseopts --usecustomrepo $customrepopath"
fi
testbaseopts=""
if [ "$post" != "" ]; then
	testbaseopts="$testbaseopts --post-results"
fi

# load auth options
. ./${provider}.auth

# load per provider / rhelver create/deploy/test options
. ./${provider}.rhel${rhelver}

# generic log options, debug off by default
logopts="--verbose --nocolorlog"
if [ "$debug" != "" ]; then
	logopts="$logopts --debug"
fi

# generate cluster name
if [ "$jobid" != "" ]; then
	jobid="j$jobid"
fi
clusteropts="--cluster ${provider}c${rhelver}${jobid}"

# put all options together
options="--provider $provider $authopts $clusteropts $logopts"

cloud_delete() {
	vapor delete $options
}

cloud_create() {
	# perform provider specific setup
	${provider}_setup
	vapor create $options $createbaseopts $createopts
}

cloud_deploy() {
	vapor deploy $options $deploybaseopts $deployopts
}

cloud_test() {
	testtype="$1"

	callopts="-t"
	if [ "$testtype" = "tags" ]; then
		callopts="-T"
	fi

	vapor test $options $testbaseopts --nodes $nodes $testopts $callopts "$tests"
}

cloud_reboot() {
	vapor reboot $options
}

cloud_info() {
	vapor get --provider $provider $authopts $clusteropts --ssh
	vapor get --provider $provider $authopts $clusteropts --scp
}

cloud_recovery() {
	echo -n "Attempting to recover cloud (cleanup): "
	tests="cleanup"
	cloud_test test > /dev/null 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
	else
		echo "PASS"
		return 0
	fi
	echo -n "Attempting to recover cloud (reboot): "
	cloud_reboot > /dev/null 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cloud_delete
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi
	echo "Waiting 5 minutes for nodes to be back online"
	sleep 300
	cloud_test test > /dev/null 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cloud_delete
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi
}

cloud_validate() {
	. ./tests.${testvariant}

	if [ "$upstream" != "" ]; then
		upver="_${upstream}"
	fi

	if [ "$jobid" != "" ]; then
		jobid="_${jobid}"
	fi

	logdir="$(mktemp -d)"

	set +e
	echo "=== Cloud Validation for ${provider} rhel${rhelver}${upver} ==="

	echo -n "Deleting any old envs: "
	cloud_delete > "$logdir/delete_old.log" 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cat "$logdir/delete_old.log"
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi

	echo -n "Creating ${provider} rhel${rhelver} nodes: "
	cloud_create > "$logdir/create.log" 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cat "$logdir/create.log"
		cloud_delete
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi

	if [ "${provider}" = "libvirtd" ]; then
		echo "libvirtd: artificial sleep to give time to the nodes to boot"
		sleep 60
	fi

	echo -n "Deploying ${provider} rhel${rhelver} nodes: "
	cloud_deploy > "$logdir/deploy.log" 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cat "$logdir/deploy.log"
		cloud_delete
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi

	nodeslist="2 3 4 6 8 16 24 32"
	if [ "$forcenodes" = "yes" ]; then
		nodeslist="$nodes"
	fi
	nlist=""
	for n in $nodeslist; do
		if [ "$n" -lt "$nodes" ]; then
			nlist="$nlist $n"
		else
			nlist="$nlist $nodes"
			break
		fi
	done

	requestedtests="$tests"
	if [ "$requestedtests" = "setup" ]; then
		requestedtests="all"
	fi

	echo "Starting validation ${provider} rhel${rhelver}_${upstream}"
	for nodes in $nlist; do
		testlist="$smoketests"
		taglist="$smoketags"
		if [ "$requestedtests" = "all" ]; then
			nodestestlist="tests_${nodes}_nodes"
			nodestaglist="tags_${nodes}_nodes"
			testlist="$testlist $testsbasic ${!nodestestlist}"
			taglist="$taglist $tagsbasic ${!nodestaglist}"
			if [ "$nodes" -gt "2" ]; then
				testlist="$testlist $testsplus"
				taglist="$taglist $tagsplus"
			fi
		fi
		echo "Running tests"
		for tests in $testlist; do
			echo -n "Testing ${provider} rhel${rhelver} [nodes: $nodes] [$tests]: "
			cloud_test test > "$logdir/${nodes}_nodes-${tests}.log" 2>&1
			if [ "$?" != "0" ]; then
				echo "FAILED"
				cat "$logdir/${nodes}_nodes-${tests}.log"
				cloud_recovery
			else
				echo "PASS"
			fi
			tests="cleanup"
			cloud_test test > /dev/null 2>&1 || cloud_recovery
		done
		echo "Running test tags"
		for tests in $taglist; do
			echo -n "Testing ${provider} rhel${rhelver} [nodes: $nodes] [$tests]: "
			cloud_test tags > "$logdir/${nodes}_nodes-${tests}.log" 2>&1
			if [ "$?" != "0" ]; then
				echo "FAILED"
				cat "$logdir/${nodes}_nodes-${tests}.log"
				cloud_recovery
			else
				echo "PASS"
			fi
			tests="cleanup"
			cloud_test test > /dev/null 2>&1 || cloud_recovery
		done
	done

	echo -n "Deleting test env: "
	cloud_delete > "$logdir/delete.log" 2>&1
	if [ "$?" != "0" ]; then
		echo "FAILED"
		cat "$logdir/delete.log"
		rm -rf "$logdir"
		exit 1
	else
		echo "PASS"
	fi

	set -e

	rm -rf "$logdir"
}

ret=0

case "$command" in
del|delete)
	cloud_delete
	ret=$?
	;;
create)
	cloud_create
	ret=$?
	;;
deploy)
	cloud_deploy
	ret=$?
	;;
test)
	if [ -n "$teststags" ]; then
		tests="$teststags"
		cloud_test tags
	else
		cloud_test test
	fi
	ret=$?
	;;
reboot)
	cloud_reboot
	ret=$?
	;;
ssh)
	cloud_info
	;;
validate)
	cloud_validate
	;;
*)
	echo "unknown command: $command"
	print_usage
	ret=1
	;;
esac

exit $ret
