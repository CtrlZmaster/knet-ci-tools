#!/bin/bash

set -e

trap cleanup EXIT

cleanup() {
	[ -n "$TMPDIR" ] && rm -rf $TMPDIR
}

TMPDIR=$(mktemp -d /tmp/jnodemgmtXXXXXX)

getnodelist() {
	nodelist="$(ls -1 $HOME/nodes)"
}

getjoblist() {
	joblist="$(ls -1 $HOME/jobs)"
}

delnodefromjob() {
	job="$1"
	node="$2"

	cp $HOME/jobs/$job/config.xml $TMPDIR/${job}.xml

	xmlstarlet ed \
		--net \
		--inplace \
		--delete "/matrix-project/axes/hudson.matrix.LabelAxis/values/string[contains(text(),'$node')]" \
		$TMPDIR/${job}.xml 2>/dev/null

	cat $TMPDIR/${job}.xml > $HOME/jobs/$job/config.xml

	rm -rf $TMPDIR/${job}.xml
}

delnodefromalljobs() {
	node="$1"

	for i in $joblist; do
		delnodefromjob $i $node
	done
}

addnodetojob() {
	job="$1"
	node="$2"

	cp $HOME/jobs/$job/config.xml $TMPDIR/${job}.xml

	xmlstarlet ed \
		--net \
		--inplace \
		--insert "/matrix-project/axes/hudson.matrix.LabelAxis/values/string[1]" \
		--type elem \
		--name string \
		--value $node \
		$TMPDIR/${job}.xml 2>/dev/null

	cat $TMPDIR/${job}.xml > $HOME/jobs/$job/config.xml

	rm -rf $TMPDIR/${job}.xml
}

addnodetoalljobs() {
	node="$1"
	rpm=no
	clang=yes
	packager=""
	voting=no
	oldbuilds=no

	labels=$(cat $HOME/nodes/$node/config.xml | grep label | sed -e 's/<label>//g' -e 's/<\/label>//g')

	echo $labels

	for i in $labels; do
		case $i in
			rpm)
				rpm=yes
				;;
			noclang)
				clang=no
				;;
			yum|zypper|apt|freebsd)
				packager=$i
				;;
			voting)
				voting=yes
				;;
			stable|unstable)
				updater=$i
				;;
			rhel7*|centos-7*|rhel8*|centos-8*)
				oldbuilds=yes
				;;
		esac
	done
	echo rpm $rpm clang $clang packager $packager voting $voting
	echo $joblist
	localjoblist=""
	for i in $joblist; do
		addjob=0
		case $i in
			anvil-*|*pagure*|*ci-test*)
				echo Skipping manual job $i
				;;
			all-weekly|build-rpm-repos|reinstall-all-manual|reconnect-all-nodes|get-artifacts)
				echo Skipping global job $i
				;;
			*after-merge|*github-pr-builder|*covscan*|*crosscompile*)
				echo Skipping hook job $i
				;;
			*ha-functional*)
				echo Skipping functional job $i
				;;
			update-all-ci-tools)
				echo Adding updating job $i
				addjob=1
				;;
			update-all-${packager}-${updater})
				echo Adding updating job $i
				addjob=1
				;;
			update-anvil*|update-all*|update-freebsd-devel|update-kernel-devel)
				echo Skipping updating job $i
				;;
			*clang)
				if [ $clang == yes ]; then
					echo Adding to clang job $i
					addjob=1
				else
					echo Skipping clang job $i
				fi
				;;
			*pcs*)
				case $i in
					*pcs-0*)
						# managed manually
						;;
					*rpms)
						if [ $rpm == yes ]; then
							if [ $oldbuilds == yes ]; then
								echo Skipping oldbuilds job $i
							else
								echo Adding oldbuilds to job $i
								addjob=1
							fi
						fi
						;;
					*-nonvoting)
						if [ $voting == no ]; then
							if [ $oldbuilds == yes ]; then
								echo Skipping oldbuilds job $i
							else
								echo Adding oldbuilds to job $i
								addjob=1
							fi
						else
							echo Skipping nonvoting job $i
						fi
						;;
					*-voting)
						if [ $voting == yes ]; then
							if [ $oldbuilds == yes ]; then
								echo Skipping oldbuilds job $i
							else
								echo Adding oldbuilds to job $i
								addjob=1
							fi
						else
							echo Skipping voting job $i
						fi
						;;
					*)
						if [ $oldbuilds == yes ]; then
							echo Skipping oldbuilds job $i
						else
							echo Adding oldbuilds to job $i
							addjob=1
						fi
						;;
				esac
				;;
			*rpms)
				case $i in
					*pcs*)
						echo Skipping rpm job $i - managed separately
					;;
					*)
						if [ $rpm == yes ]; then
							echo Adding to rpm job $i
							addjob=1
						else
							echo Skipping rpm job $i
						fi
					;;
				esac
				;;
			*-nonvoting)
				if [ $voting == no ]; then
					echo Adding to nonvoting job $i
					addjob=1
				else
					echo Skipping nonvoting job $i
				fi
				;;
			*-voting)
				if [ $voting == yes ]; then
					echo Adding to voting job $i
					addjob=1
				else
					echo Skipping voting job $i
				fi
				;;
			*)
				echo Adding leftover $i
				addjob=1
				;;
		esac
		if [ $addjob == 1 ]; then
			localjoblist="$localjoblist $i"
		fi
	done
	echo $localjoblist
	for i in $localjoblist; do
		addnodetojob $i $node
	done
}

listnodejobs()
{
	node="$1"

	mkdir -p $TMPDIR/jobs

	for job in $joblist; do
		cp $HOME/jobs/$job/config.xml $TMPDIR/jobs/${job}.xml 2>/dev/null
	done

	cd $TMPDIR/jobs 2>/dev/null
	grep -l $node *.xml | sed -e 's/.xml//g'
	cd - >/dev/null

	rm -rf $TMPDIR/jobs
}

action=$1
node=$2

getjoblist
getnodelist

reloadconfig=1

case $action in
	del)
		delnodefromalljobs $node
	;;
	add)
		addnodetoalljobs $node
	;;
	list)
		listnodejobs $node
		reloadconfig=0
	;;
	add-to-job-list)
		shift
		shift
		jobs=$@
		for job in $jobs; do
			addnodetojob $job $node
		done
	;;
esac

if [ "$reloadconfig" = "1" ]; then
	./jcli reload-configuration 2>/dev/null
fi

exit 0
