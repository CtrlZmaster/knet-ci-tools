// Jenkinsfile for the ha-functiona-testing

@Library(['GlobalLib', 'VaporLib', 'ProjectLib']) _

def project = 'ha-functional-testing'
def projectid = 'haft'

pipeline {
    agent { label "${provider}" }

    options {
	skipDefaultCheckout(true)
    }

    stages {
	stage('Prepare test cluster') {
	    steps {
		script {
		    info = getBuildInfo(project, projectid)

		    stage('Prep build env') {
			cleanWs(disableDeferredWipeout: true, deleteDirs: true)
			delete_cluster(info)
		    }
		    stage("Create ${info['provider']} rhel${info['rhelver']} test cluster") {
			create_cluster(info)
		    }
		    stage("Check ${info['provider']} rhel${info['rhelver']} test cluster availability") {
			access_cluster(info)
		    }
		    stage("Deploy ${info['provider']} rhel${info['rhelver']} zstream: ${info['zstream']} upstream: ${info['upstream']} test cluster") {
			deploy_cluster(info)
		    }
		}
	    }
	}
	stage('Run tests') {
	    steps {
		script {
		    for (info['nodes'] = info['fromnodes']; info['nodes'] <= info['tonodes']; info['nodes']++) {

			// tests
			info['testtype'] = 'tests'
			info['runtesttimeout'] = info['testtimeout']
			def finaltestlist = [ ]
			if ("${info['testlist']}" == 'auto') {
			    finaltestlist = get_cluster_tests(info)
			} else if ("${info['testlist']}" != '') {
			    finaltestlist = "${info['testlist']}".split(';')
			}
			println(finaltestlist)
			for (test in finaltestlist) {
			    info['runtest'] = test
			    stage("Run test '${info['runtest']}' on ${info['nodes']} nodes") {
				run_cluster_test(info)
			    }
			}

			// tags
			info['testtype'] = 'tags'
			info['runtesttimeout'] = info['tagtimeout']
			def finaltaglist = [ ]
			if ("${info['taglist']}" == 'auto') {
			    finaltaglist = get_cluster_tests(info)
			} else if ("${info['taglist']}" != '') {
			    finaltaglist = "${info['taglist']}".split(';')
			}
			println(finaltaglist)
			for (test in finaltaglist) {
			    info['runtest'] = test
			    stage("Run tag '${info['runtest']}' on ${info['nodes']} nodes") {
				run_cluster_test(info)
			    }
			}
		    }
		}
	    }
	}
    }

    post {
	always {
	    delete_cluster(info)
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	    node('built-in') {
		script {
		    info['branch'] = "${info['provider']} rhel${info['rhelver']} zstream: ${info['zstream']} upstream: ${info['upstream']} tests: ${info['tests']}"
		    sendEmails(info)
		}
	    }
	}
    }
}
