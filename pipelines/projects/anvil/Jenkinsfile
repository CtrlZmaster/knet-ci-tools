// Jenkinsfile for anvil CI project

@Library(['GlobalLib', 'GithubLib', 'ProjectLib']) _

// Globals
def project = 'anvil'
def draft_override = '1'
def anvilsrc = ''
def anviltests = 'all'

pipeline {
    agent { label 'built-in' }

    environment {
	ISDRAFTOVERRIDE = '1'
    }

    stages {
	// First check we are allowed to run and collect generic job info
	stage('Validate build env') {
	    steps {
		script {
		    info = getBuildInfo(project, draft_override)
		    // set anvilsrc based on PR
		    if (info['isPullRequest']) {
			anvilsrc = "pr/${info['pull_id']}"
		    } else {
			anvilsrc = "ci"
		    }
		    // For special jobs (manual override)
		    if (info['is_draft']) {
			anviltests = 'all,skip_advanced_servers'
			info['is_draft'] = false
		    }
		}
	    }
	}

	// This is the main stage that covers everything
	stage('Start builds') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { info['authcheck'] == true && info['is_draft'] == false }
	    }
	    // All of the stages that actually do stuff
	    stages {
		stage('voting') {
		    steps {
			build job: "${project}-build-all-voting",
			    parameters: [string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
					 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
					 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}")]
		    }
		}
		stage('rpm builds') {
		    steps {
			build job: "${project}-build-rpms",
			    parameters: [string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
					 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
					 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}"),
					 string(name: 'publishrpm', value: "${info['install']}"),
					 string(name: 'publishprrpm', value: "${info['publish_pr_rpm']}")]
		    }
		}
		stage('functional testing') {
		    steps {
			build job: "${project}-build-all-functional-testing",
			    parameters: [string(name: 'ANVILSRC', value: "${anvilsrc}"),
					 string(name: 'TESTS', value: "${anviltests}")]
		    }
		}
	    }
	}
    }
    post {
	success {
	    script {
		postFunctions(['project': project, 'state': 'success'])
	    }
	}
	failure {
	    script {
		postFunctions(['project': project, 'state': 'failure'])
	    }
	}
    }
}
