// Jenkinsfile for the kernel-ark project

@Library(['GlobalLib', 'ProjectLib']) _

// Globals
def project = 'kernel-ark'

String[] tests = ['setup', 'cleanup', 'skeet']

pipeline {
    agent { label 'libvirtd' }

    parameters {
	string(name: 'testtag', defaultValue: 'brawl_quick', description: 'vedder tag')
	string(name: 'timeout', defaultValue: '720', description: 'timeout in minutes')
    }

    options {
	timeout(time: "${params.timeout}", unit: 'MINUTES')
	// This is required if you want to clean before build
	// and kernel build is done via cache clone
	skipDefaultCheckout(true)
    }

    environment {
	BUILDDIR = "${env.WORKSPACE}"
	ARK_BRANCH = 'os-build'
	CACHEDIR = '/srv/kcache'
    }

    stages {
	stage('kernel build') {
	    stages {
		// This is the main stage that covers everything
		stage('Prep workspace') {
		    steps {
			// Clean before build
			sh 'env|sort'

			cleanWs(disableDeferredWipeout: true, deleteDirs: true)

			sh '''
			    echo "Delete any old test cluster"
			    cd $HOME/ci-tools/fn-testing
			    ./validate-cloud -c delete -p libvirtd -d -r 9
			'''
		    }
		}
		stage('Populating kernel-ark cache') {
		    steps {
			sh '''
			    mkdir -p $CACHEDIR
			    if [ ! -d $CACHEDIR/kernel-ark ]; then
				cd $CACHEDIR
				echo "Cloning kernel-ark.git"
				git clone https://gitlab.com/cki-project/kernel-ark.git
				cd kernel-ark
				echo "Adding remote linux-gfs2.git"
				git remote add gfs2 git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2.git
				echo "Adding remote linux-dlm.git"
				git remote add dlm git://git.kernel.org/pub/scm/linux/kernel/git/teigland/linux-dlm.git
			    fi
			'''
		    }
		}
		stage('Updating kernel-ark cache') {
		    steps {
			sh '''
			    cd $CACHEDIR/kernel-ark
			    echo == reset tree to $ARK_BRANCH ==
			    git checkout $ARK_BRANCH
			    echo == fetch kernel-ark ==
			    git fetch origin
			    echo == fetch gfs2 ==
			    git fetch gfs2
			    echo == fetch dlm ==
			    git fetch dlm
			    echo == reset tree to origin/$ARK_BRANCH ==
			    git reset --hard origin/$ARK_BRANCH
			'''
		    }
		}
		stage('Cloning cache to build workspace') {
		    steps {
			sh '''
			    echo == clone tree to build dir ==
			    cd $BUILDDIR
			    rsync -a $CACHEDIR/kernel-ark .
			'''
		    }
		}
		stage('Merging kernel-ark / gfs2 / dlm trees') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == checkout ci-test branch ==
			    git checkout -b ci-test
			    echo == merge gfs2/for-next and dlm/next ==
			    git merge --log=999 --no-ff -m 'Automatic merge of gfs2/for-next and dlm/next' gfs2/for-next dlm/next
			    git show --no-patch
			    echo == apply workaround for debuginfo package build ==
			    git revert --no-edit 7dc0430e5e007a7441a8f5109276df99b4cf48a7
			'''
		    }
		}
		stage('Installing kernel-ark BuildRequires') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == install BuildRequires ==
			    yum -y install system-sb-certs libpfm-devel libunwind-devel $(make dist-get-buildreqs | grep "Missing dependencies:" | cut -d":" -f2)
			'''
		    }
		}
		stage('Build srpm') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build srpm ==
			    make -j $(nproc) dist-srpm
			'''
		    }
		}
		stage('Build rpms') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build rpms ==
			    srcrpm=$(ls -1 redhat/rpm/SRPMS/kernel-*.src.rpm)
			    RPMBUILDOPTS="--without debug --without doc"

			    CIRPMDIR=$(pwd)/ci-test-rpms
			    rm -rf $CIRPMDIR
			    mkdir -p $CIRPMDIR

			    rpmbuild \
				--define "_sourcedir $CIRPMDIR/SOURCES" \
				--define "_specdir $CIRPMDIR/SPECS" \
				--define "_builddir $CIRPMDIR/BUILD" \
				--define "_buildrootdir $CIRPMDIR/BUILDROOT" \
				--define "_srcrpmdir $CIRPMDIR/SRPM" \
				--define "_rpmdir $CIRPMDIR/RPMS" \
				$RPMBUILDOPTS \
				-rb $srcrpm
			'''
		    }
		}
		stage('Collect rpms') {
		    steps {
			script {
			    timeStamp = Calendar.getInstance().getTime().format('YYYYMMdd-hhmmss',TimeZone.getTimeZone('UTC'))
			}
			build job: 'global/get-artifacts',
			    parameters: [string(name: 'sourcenode', value: "${env.NODE_NAME}"),
					 string(name: 'sourcedir', value: "${env.WORKSPACE}/"),
					 string(name: 'destdir', value: "rpmrepos/kernel/rhel9-kbuild/origin/ci-test/${timeStamp}/"),
					 string(name: 'transferset', value: 'rpm')]
		    }
		}
		stage('Publish rpms') {
		    steps {
			build job: 'global/build-rpm-repos',
			    parameters: [string(name: 'project', value: 'kernel'),
					 string(name: 'branch', value: 'origin/ci-test')]
		    }
		}
	    }
	}
	stage('kernel testing') {
	    stages {
		stage('Create test cluster') {
		    steps {
			sh '''
			    echo "Creating test cluster"
			    cd $HOME/ci-tools/fn-testing
			    ./validate-cloud -c create -p libvirtd -d -r 9 -n 3 -s 110 -i 0
			'''
		    }
		}
		stage('Check test cluster availability') {
		    steps {
			sh '''
			    echo "Waiting for cluster to boot"
			    cd $HOME/ci-tools/fn-testing
			    wsip=$(./validate-cloud -c ip -p libvirtd -r 9)
			    waittimeout=600

			    while ! nc -z $wsip 22 && [ "$waittimeout" -gt "0" ]; do
				sleep 1
				waittimeout=$((waittimeout - 1))
			    done

			    if [ "$waittimeout" = "0" ]; then
				echo "Cluster failed to boot"
				exit 1
			    fi

			    echo "Cluster done booting"
			'''
		    }
		}
		stage('Deploy test cluster') {
		    steps {
			sh '''
			    echo "Deploy test cluster"
			    cd $HOME/ci-tools/fn-testing
			    ./validate-cloud -c deploy -p libvirtd -d -r 9 -i 0 -u next-stable-kernel
			'''
		    }
		}
		stage('Run tests') {
		    steps {
			script {
			    for (test in tests) {
				stage("Run vedder test: ${test}") {
				    sh """
					cd $HOME/ci-tools/fn-testing
					./validate-cloud -c test -p libvirtd -d -r 9 -j "jenkins:${BUILD_URL}" -n 3 -e -t ${test}
				    """
				}
			    }
			    stage("Run vedder tag: ${params.testtag}") {
				sh """
				    cd $HOME/ci-tools/fn-testing
				    ./validate-cloud -c test -p libvirtd -d -r 9 -j "jenkins:${BUILD_URL}" -n 3 -e -T ${params.testtag}
				"""
			    }
			}
		    }
		}
	    }
	}
    }

    post {
	success {
	    script {
		postFunctions(['project': project, 'state': 'success'])
	    }
	}
	failure {
	    script {
		postFunctions(['project': project, 'state': 'failure'])
	    }
	}
	always {
	    sh '''
		echo "Deleting test cluster"
		cd $HOME/ci-tools/fn-testing
		./validate-cloud -c delete -p libvirtd -r 9
	    '''
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	}
    }
}
