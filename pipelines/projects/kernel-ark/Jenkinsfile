// Jenkinsfile for the kernel-ark project

@Library(['GlobalLib', 'VaporLib', 'ProjectLib']) _

// Globals
def project = 'kernel-ark'
def projectid = 'kft'

// kernel-ark overrides
def provider = 'libvirtd'
def fromnodes = 3
def tonodes = 3
def rhelver = '9'
def zstream = 'no'
def upstream = 'next-stable-kernel'
def iscsi = '0'
def block = '110'
def testvariant = 'kernel'
def tests = 'all'

pipeline {
    agent { label "${provider}" }

    parameters {
	string(name: 'testlist', defaultValue: 'auto', description: 'override auto generated test list. Set to empty to skip running tests')
	string(name: 'taglist', defaultValue: 'auto', description: 'override auto generated tag list. Set to empty to skip running tags')
	string(name: 'testtimeout', defaultValue: '60', description: 'timeout for running any test (in minutes)')
	string(name: 'tagtimeout', defaultValue: '360', description: 'timeout for running any tag (in minutes)')
	string(name: 'dryrun', defaultValue: '0', description: 'set to 1 to see what the pipeline would do, without actually doing anything')
	string(name: 'skipkernelbuild', defaultValue: '0', description: 'set to 1 to only run tests on current kernel')
    }

    options {
	// This is required if you want to clean before build
	// and kernel build is done via cache clone
	skipDefaultCheckout(true)
    }

    environment {
	BUILDDIR = "${env.WORKSPACE}"
	ARK_BRANCH = 'os-build'
	CACHEDIR = '/srv/kcache'
    }

    stages {
	stage('Validate build env') {
	    steps {
		script {
		    info = getBuildInfo(project, projectid)
		    info['provider'] = provider
		    info['fromnodes'] = fromnodes
		    info['tonodes'] = tonodes
		    info['rhelver'] = rhelver
		    info['zstream'] = zstream
		    info['upstream'] = upstream
		    info['iscsi'] = iscsi
		    info['block'] = block
		    info['tests'] = tests
		    info['testvariant'] = testvariant
		    info['testlist'] = "${params.testlist}"
		    info['taglist'] = "${params.taglist}"
		    info['testtimeout'] = "${params.testtimeout}" as int
		    info['tagtimeout'] = "${params.tagtimeout}" as int
		    info['dryrun'] = "${params.dryrun}"

		    println("info map: ${info}")

		    stage('Prep workspace') {
			cleanWs(disableDeferredWipeout: true, deleteDirs: true)
			delete_cluster(info)
		    }
		}
	    }
	}
	stage('kernel build') {
	    when {
		expression { "${params.skipkernelbuild}" == '0' }
	    }
	    stages {
		// This is the main stage that covers everything
		stage('Populating kernel-ark cache') {
		    steps {
			sh '''
			    mkdir -p $CACHEDIR
			    if [ ! -d $CACHEDIR/kernel-ark ]; then
				cd $CACHEDIR
				echo "Cloning kernel-ark.git"
				git clone https://gitlab.com/cki-project/kernel-ark.git
				cd kernel-ark
				echo "Adding remote linux-gfs2.git"
				git remote add gfs2 git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2.git
				echo "Adding remote linux-dlm.git"
				git remote add dlm git://git.kernel.org/pub/scm/linux/kernel/git/teigland/linux-dlm.git
				echo "Adding remote kernel-ark.git for config"
				git remote add kernel-ark-config https://gitlab.com/netcoder/kernel-ark.git
			    fi
			'''
		    }
		}
		stage('Updating kernel-ark cache') {
		    steps {
			sh '''
			    cd $CACHEDIR/kernel-ark
			    echo == reset tree to $ARK_BRANCH ==
			    git checkout $ARK_BRANCH
			    echo == fetch kernel-ark ==
			    git fetch origin
			    echo == fetch gfs2 ==
			    git fetch gfs2
			    echo == fetch dlm ==
			    git fetch dlm
			    echo == fetch kernel-ark-config ==
			    git fetch kernel-ark-config
			    echo == reset tree to origin/$ARK_BRANCH ==
			    git reset --hard origin/$ARK_BRANCH
			'''
		    }
		}
		stage('Cloning cache to build workspace') {
		    steps {
			sh '''
			    echo == clone tree to build dir ==
			    cd $BUILDDIR
			    rsync -a $CACHEDIR/kernel-ark .
			'''
		    }
		}
		stage('Merging kernel-ark / gfs2 / dlm / kernel-ark-config trees') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == checkout ci-test branch ==
			    git checkout -b ci-test
			    echo == merge gfs2/for-next dlm/next and kernel-ark-config/ci_test_config ==
			    git merge --log=999 --no-ff -m 'Automatic merge of gfs2/for-next dlm/next and kernel-ark-config/ci_test_config' gfs2/for-next dlm/next kernel-ark-config/ci_test_config
			    git show --no-patch
			    echo == apply workaround for debuginfo package build ==
			    git revert --no-edit 7dc0430e5e007a7441a8f5109276df99b4cf48a7
			'''
		    }
		}
		stage('Installing kernel-ark BuildRequires') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == install BuildRequires ==
			    yum -y install system-sb-certs libpfm-devel libunwind-devel $(make dist-get-buildreqs | grep "Missing dependencies:" | cut -d":" -f2)
			'''
		    }
		}
		stage('Build srpm') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build srpm ==
			    make -j $(nproc) dist-srpm
			'''
		    }
		}
		stage('Build rpms') {
		    steps {
			sh '''
			    cd $BUILDDIR/kernel-ark
			    echo == build rpms ==
			    srcrpm=$(ls -1 redhat/rpm/SRPMS/kernel-*.src.rpm)
			    RPMBUILDOPTS="--without debug --without doc"

			    CIRPMDIR=$(pwd)/ci-test-rpms
			    rm -rf $CIRPMDIR
			    mkdir -p $CIRPMDIR

			    rpmbuild \
				--define "_sourcedir $CIRPMDIR/SOURCES" \
				--define "_specdir $CIRPMDIR/SPECS" \
				--define "_builddir $CIRPMDIR/BUILD" \
				--define "_buildrootdir $CIRPMDIR/BUILDROOT" \
				--define "_srcrpmdir $CIRPMDIR/SRPM" \
				--define "_rpmdir $CIRPMDIR/RPMS" \
				$RPMBUILDOPTS \
				-rb $srcrpm
			'''
		    }
		}
		stage('Collect rpms') {
		    steps {
			script {
			    timeStamp = Calendar.getInstance().getTime().format('YYYYMMdd-hhmmss',TimeZone.getTimeZone('UTC'))
			}
			build job: 'global/get-artifacts',
			    parameters: [string(name: 'sourcenode', value: "${env.NODE_NAME}"),
					 string(name: 'sourcedir', value: "${env.WORKSPACE}/"),
					 string(name: 'destdir', value: "builds/kernel/rhel9-kbuild/origin/ci-test/${timeStamp}/"),
					 string(name: 'transferset', value: 'rpm')]
		    }
		}
		stage('Publish rpms') {
		    steps {
			build job: 'global/build-rpm-repos',
			    parameters: [string(name: 'project', value: 'kernel'),
					 string(name: 'branch', value: 'origin/ci-test')]
		    }
		}
	    }
	}
	stage('kernel testing') {
	    stages {
		stage('Create test cluster') {
		    steps {
			create_cluster(info)
		    }
		}
		stage('Check test cluster availability') {
		    steps {
			access_cluster(info)
		    }
		}
		stage('Deploy test cluster') {
		    steps {
			deploy_cluster(info)
		    }
		}
		stage('Run tests') {
		    steps {
			script {
			    for (info['nodes'] = info['fromnodes']; info['nodes'] <= info['tonodes']; info['nodes']++) {

				// tests
				info['testtype'] = 'tests'
				info['runtesttimeout'] = info['testtimeout']
				def finaltestlist = [ ]
				if ("${info['testlist']}" == 'auto') {
				    finaltestlist = get_cluster_tests(info)
				} else if ("${info['testlist']}" != '') {
				    finaltestlist = "${info['testlist']}".split(';')
				}
				println(finaltestlist)
				for (test in finaltestlist) {
				    info['runtest'] = test
				    stage("Run test '${info['runtest']}' on ${info['nodes']} nodes") {
					run_cluster_test(info)
				    }
				}

				// tags
				info['testtype'] = 'tags'
				info['runtesttimeout'] = info['tagtimeout']
				def finaltaglist = [ ]
				if ("${info['taglist']}" == 'auto') {
				    finaltaglist = get_cluster_tests(info)
				} else if ("${info['taglist']}" != '') {
				    finaltaglist = "${info['taglist']}".split(';')
				}
				println(finaltaglist)
				for (test in finaltaglist) {
				    info['runtest'] = test
				    stage("Run tag '${info['runtest']}' on ${info['nodes']} nodes") {
					run_cluster_test(info)
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }

    post {
	always {
	    delete_cluster(info)
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	    node('built-in') {
		script {
		    sendEmails(info)
		}
	    }
	}
    }
}
