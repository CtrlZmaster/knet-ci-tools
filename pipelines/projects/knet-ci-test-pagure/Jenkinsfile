// Jenkinsfile for the a knet CI main project

// REMEMBER that due to the generic pipeline config in Jenkins
// the pipeline job itself exists inside a ci-test-project folder
// that is currently configured to load ProjectLib.
// *** A simple pipeline cannot load libs ***
// we need to revisit this whole concept a bit to keep it clean and
// consistent, otherwise Jenkins views will be extremely different
// to browse.
@Library(['GlobalLib', 'PagureLib', 'ProjectLib']) _

// Globals

// need to keep it separated from ci-test as source code control is different
// inside ci-tools. Some bits have been added to main to deal with this.
def project = 'ci-test'

// the pipeline configured in Jenkins has no knowledge of the repo since
// it´s a generic pipeline and has no git scm, so we have to deal with it
// manually
def upstream_repo = 'https://pagure.io/knet-ci-test.git'

// NOTE for above: because we have a discrepancy between project name in Jenkins
//                 and project name in github/pagure, we need to specify both.
//                 this shouldn´t be necessary for dlm/gfs2-utils.

// Set defaults
def nonvoting_fail = 0
def voting_fail = 0

pipeline {
    agent { label 'built-in' }

    stages {
	// First check we are allowed to run, then set some params for that run
	stage('Validate build env') {
	    steps {
		script {
		    info = getBuildInfo(project, upstream_repo)

		    stage("Checkout ${info['jobname']}") {
			getSCM(['project': project, 'upstream_repo': upstream_repo, 'target': info['target'], 'isPullRequest': info['isPullRequest']])
		    }
		}
	    }
	}
	// This is the main stage that covers everything
	stage('Start builds') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { info['authcheck'] == true }
	    }
	    // All of the stages that actually do stuff
	    // for testing the ci-test-* jobs have been created. those
	    // are clones from gfs2-utils-* and they currently use a different set of
	    // parameters vs github jobs.
	    // at the moment, ${install} is ignored by voting/non-voting. Neither
	    // gfs2-utils or dlm are required on the target nodes (similar to pcs).
	    // Only rpms are needed for functional testing.
	    stages {
		stage('Standard builds') {
		    parallel {
			stage('voting') {
			    steps {
				build job: "${project}-pagure/${project}-build-all-voting",
				    parameters: [string(name: 'install', value : "${info['install']}"),
						 string(name: 'ghprbActualCommit', value : "${info['actual_commit']}"),
						 string(name: 'REPO', value : env.REPO),
						 string(name: 'BRANCH', value : env.BRANCH),
						 string(name: 'BRANCH_TO', value : env.BRANCH_TO),
						 string(name: 'compiler', value : 'gcc')]
			    }
			}
			stage('buildrpms') {
			    steps {
				script {
				    try {
					build job: "${project}-pagure/${project}-build-rpms",
					    parameters: [string(name: 'ghprbActualCommit', value : "${info['actual_commit']}"),
							 string(name: 'REPO', value : env.REPO),
							 string(name: 'BRANCH', value : env.BRANCH),
							 string(name: 'BRANCH_TO', value : env.BRANCH_TO),
							 string(name: 'publishrpm', value : "${info['publish_rpm']}"),
							 string(name: 'publishprrpm', value : "${info['publish_pr_rpm']}"),
							 string(name: 'bootstrap', value : '0')]
				    } catch (err) {
					nonvoting_fail++
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
    post {
	success {
	    // Notify interested users if non-voting jobs fail
	    script {
		postFunctions(['project': project, 'state': 'success', 'branch': "${info['jobname']}"])
	    }
	}
	failure {
	    // Notify interested users if voting jobs fail
	    script {
		postFunctions(['project': project, 'state': 'failure', 'branch': "${info['jobname']}"])
	    }
	}
    }
}
