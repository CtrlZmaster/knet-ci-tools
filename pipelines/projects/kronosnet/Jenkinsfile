// Jenkinsfile for knet CI project

@Library(['GlobalLib', 'GithubLib', 'ProjectLib']) _

// Globals
def project = 'kronosnet'
def nonvoting_fail = 0
def voting_fail = 0

pipeline {
    agent { label 'built-in' }

    stages {
	// First check we are allowed to run and collect generic job info
	stage('Validate build env') {
	    steps {
		script {
		    info = getBuildInfo(project)
		}
	    }
	}

	// This is the main stage that covers everything
	stage('Start builds') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { info['authcheck'] == true && info['is_draft'] == false }
	    }
	    // All of the stages that actually do stuff
	    stages {
		stage('Standard builds') {
		    parallel {
			stage('voting') {
			    steps {
				build job: "${project}/knet-build-all-voting",
				    parameters: [string(name: 'install', value: "${info['install']}"),
						 string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
						 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
						 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}"),
						 string(name: 'compiler', value: 'gcc')]
			    }
			}
			stage('crosscompile-armhf') {
			    steps {
				build job: "${project}/knet-build-crosscompile-armhf",
				    parameters: [string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
						 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
						 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}")]
			    }
			}
			stage('covscan') {
			    steps {
				build job: "${project}/knet-build-covscan",
				    parameters: [string(name: 'install', value: "${info['install']}"),
						 string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
						 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
						 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}"),
						 string(name: 'covoptions', value: "${info['covopts']}")]
			    }
			}
			stage('rpm builds') {
			    steps {
				build job: "${project}/knet-build-rpms",
				    parameters: [string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
						 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
						 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}"),
						 string(name: 'publishrpm', value: "${info['install']}"),
						 string(name: 'publishprrpm', value: "${info['publish_pr_rpm']}"),
						 string(name: 'bootstrap', value: '0')]
			    }
			}
			stage('non-voting') {
			    steps {
				script {
				    try {
					build job: "${project}/knet-build-all-nonvoting",
					    parameters: [string(name: 'install', value: "${info['install']}"),
							 string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
							 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
							 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}"),
							 string(name: 'compiler', value: 'gcc')]
				    }
				    catch (err) {
					nonvoting_fail++
				    }
				}
			    }
			}
			stage('non-voting-clang') {
			    steps {
				script {
				    try {
					build job: "${project}/knet-build-all-nonvoting-clang",
					    parameters: [string(name: 'ghprbActualCommit', value: "${info['actual_commit']}"),
							 string(name: 'ghprbPullId', value: "${info['pull_id']}"),
							 string(name: 'ghprbTargetBranch', value: "${info['target_branch']}")]
				    }
				    catch (err) {
					nonvoting_fail++
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
    post {
	success {
	    // Notify interested users if non-voting jobs fail
	    script {
		postFunctions(['project': project, 'state': 'success', 'nonvoting_fail': nonvoting_fail, 'voting_fail': voting_fail])
	    }
	}
	failure {
	    // Notify interested users if voting jobs fail
	    script {
		postFunctions(['project': project, 'state': 'failure', 'nonvoting_fail': nonvoting_fail, 'voting_fail': voting_fail])
	    }
	}
    }
}
