// Jenkinsfile for the ha-functiona-testing

@Library(['GlobalLib', 'VaporLib', 'ProjectLib']) _

def project = 'pcs-functional-testing'

// convert string params to int
def minnodes = "${fromnodes}" as int
def maxnodes = "${tonodes}" as int
def testtimeout = 60
def tagtimeout = 600
def info = [:]

def testvariant = 'pcs'
def tests = 'all'

pipeline {
    agent { label "${provider}" }

    options {
	skipDefaultCheckout(true)
    }

    stages {
	stage('Prepare test cluster') {
	    steps {
		script {
		    info['project'] = project
		    info['stages_fail_nodes'] = ''
		    info['stages_fail'] = 0
		    info['stages_run'] = 0
		    info['state'] = 'completed'

		    stage('Prep build env') {
			cleanWs(disableDeferredWipeout: true, deleteDirs: true)
			sh 'env|sort'
			delete_cluster()
		    }
		    stage("Create ${provider} rhel${rhelver} test cluster") {
			create_cluster(maxnodes)
		    }
		    stage("Check ${provider} rhel${rhelver} test cluster availability") {
			access_cluster()
		    }
		    stage("Deploy ${provider} rhel${rhelver} zstream: ${zstream} upstream: ${upstream} test cluster") {
			deploy_cluster()
		    }
		}
	    }
	}
	stage('Run tests') {
	    steps {
		script {
		    for (int nodes = minnodes; nodes <= maxnodes; nodes++) {
			def finaltestlist = [ ]
			if ("${testlist}" == 'auto') {
			    finaltestlist = get_cluster_tests('tests', testvariant, tests, nodes)
			} else if ("${testlist}" != '') {
			    finaltestlist = ["${testlist}"]
			}
			for (test in finaltestlist) {
			    stage("Run test '${test}' on ${nodes} nodes") {
				run_cluster_test('test', info, test, nodes, testtimeout)
			    }
			}
			def finaltaglist = [ ]
			if ("${taglist}" == 'auto') {
			    finaltaglist = get_cluster_tests('tags', testvariant, tests, nodes)
			} else if ("${taglist}" != '') {
			    finaltaglist = ["${taglist}"]
			}
			for (tag in finaltaglist) {
			    stage("Run tag '${tag}' on ${nodes} nodes") {
				run_cluster_test('tag', info, tag, nodes, tagtimeout)
			    }
			}
		    }
		}
	    }
	}
    }

    post {
	always {
	    delete_cluster()
	    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
	    node('built-in') {
		script {
		    info['branch'] = "${provider} rhel${rhelver} zstream: ${zstream} upstream: ${upstream} tests: ${tests}"
		    sendEmails(info)
		}
	    }
	}
    }
}
