// Jenkinsfile for the a knet CI main project
// 1-May-2023    Chrissie Caulfield    original version for running 'old-style' jobs
//

@Library('ProjectLib') _

// Globals
def authcheck = false
def nonvoting_fail = 0
def voting_fail = 0
def project = 'ci-test'

// These are the defaults for build-after-merge
def target_branch = ''
def pull_id = '1'
def actual_commit = 'origin/main'
def install = 1

pipeline {
    agent { label 'built-in' }

    stages {
	// First check we are allowed to run
	stage('Check user') {
	    steps {
		script {
		    authcheck = getAuthCheck()
		}
	    }
	}

	// This is the main stage that covers everything
	stage('Start builds') {
	    when {
		// getAuthCheck will usually abort the job if permission is denied
		// but this is an extra check!
		expression { authcheck == true }
	    }
	    // All of the stages that actually do stuff
	    stages {
		stage('Check run type') {
		    steps {
			script {
			    // Check for build-after-merge and set the params
			    // for the sub-jobs.
			    if (env.BRANCH_NAME != 'main') {
				target_branch = env.CHANGE_TARGET
				pull_id = env.CHANGE_ID
				actual_commit = env.GIT_COMMIT
				install = 0
			    }
			}
		    }
		}
		// The work.
		stage('Standard builds') {
		    parallel {
			stage('voting') {
			    steps {
				build job: "${project}-build-all-voting",
				    parameters: [string(name: 'install', value: "${install}"),
						 string(name: 'ghprbActualCommit', value : "${actual_commit}"),
						 string(name: 'ghprbPullId', value : "${pull_id}"),
						 string(name: 'ghprbTargetBranch', value : "${target_branch}"),
						 string(name: 'compiler', value : 'gcc')]
			    }
			}
			stage('non-voting') {
			    steps {
				script {
				    try {
					build job: "${project}-build-all-nonvoting",
					    parameters: [string(name: 'install', value: "${install}"),
							 string(name: 'ghprbActualCommit', value : "${actual_commit}"),
							 string(name: 'ghprbPullId', value : "${pull_id}"),
							 string(name: 'ghprbTargetBranch', value : "${target_branch}"),
							 string(name: 'compiler', value : 'gcc')]
				    }
				    catch (err) {
					nonvoting_fail++
				    }
				}
			    }
			}
			stage('covscan') {
			    steps {
				build job: "${project}-build-covscan",
				    parameters: [string(name: 'install', value: "${install}"),
						 string(name: 'ghprbActualCommit', value : "${actual_commit}"),
						 string(name: 'ghprbPullId', value : "${pull_id}"),
						 string(name: 'ghprbTargetBranch', value : "${target_branch}"),
						 string(name: 'covoptions', value : '--all --disable STACK_USE --disable-parse-warnings')]
			    }
			}
		    }
		}
		stage('rpm builds') {
		    steps {
			build job: "${project}-build-rpms",
			    parameters: [string(name: 'ghprbActualCommit', value : "${actual_commit}"),
					 string(name: 'ghprbPullId', value : "${pull_id}"),
					 string(name: 'ghprbTargetBranch', value : "${target_branch}"),
					 string(name: 'publishrpm', value : "${install}"),
					 string(name: 'bootstrap', value : '0')]
		    }
		}
	    }
	}
    }
    post {
	success {
	    // Notify interested users if non-voting jobs fail
	    script {
		postFunctions(['state': 'success', 'nonvoting_fail': nonvoting_fail, 'voting_fail': voting_fail])
	    }
	}
	failure {
	    // Notify interested users if voting jobs fail
	    script {
		postFunctions(['state': 'failure', 'nonvoting_fail': nonvoting_fail, 'voting_fail': voting_fail])
	    }
	}
    }
}
